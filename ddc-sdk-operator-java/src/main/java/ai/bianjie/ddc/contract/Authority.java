package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Authority extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161352062000100600039600081816107de0152818161081e01528181610b0e0152610b4e01526135206000f3fe60806040526004361061011f5760003560e01c8063a6ff8f0c116100a0578063e3f00c3a11610064578063e3f00c3a1461030d578063ed5cad641461032d578063f2fde38b1461034d578063faf3c53f1461036d578063fbcbc0f11461038d57600080fd5b8063a6ff8f0c14610260578063b50f1a5e14610280578063bac7ad52146102ad578063bea24f20146102cd578063e1576897146102ed57600080fd5b80634f1ef286116100e75780634f1ef286146101db578063715018a6146101ee5780638129fc1c146102035780638da5cb5b1461021857806395c2a8d91461024057600080fd5b806301843caa1461012457806305e847fb146101595780633659cfe61461017b5780633a723d171461019b578063470cf0e0146101bb575b600080fd5b34801561013057600080fd5b5061014461013f366004612bf8565b6103c0565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b50610179610174366004612c3b565b6105ce565b005b34801561018757600080fd5b50610179610196366004612c7e565b6107d4565b3480156101a757600080fd5b506101446101b6366004612bf8565b61089c565b3480156101c757600080fd5b506101446101d6366004612cb1565b610a39565b6101796101e9366004612d77565b610b04565b3480156101fa57600080fd5b50610179610bbd565b34801561020f57600080fd5b50610179610bf3565b34801561022457600080fd5b506033546040516001600160a01b039091168152602001610150565b34801561024c57600080fd5b5061014461025b366004612c7e565b610c6e565b34801561026c57600080fd5b5061017961027b366004612de8565b610c9b565b34801561028c57600080fd5b506102a061029b366004612e06565b610e4e565b6040516101509190612e22565b3480156102b957600080fd5b506101796102c8366004612e70565b610f3d565b3480156102d957600080fd5b506101796102e8366004612ec2565b611343565b3480156102f957600080fd5b50610179610308366004612ec2565b611384565b34801561031957600080fd5b50610179610328366004612f36565b611424565b34801561033957600080fd5b50610144610348366004612fcf565b611474565b34801561035957600080fd5b50610179610368366004612c7e565b6114cf565b34801561037957600080fd5b50610179610388366004612de8565b611567565b34801561039957600080fd5b506103ad6103a8366004612c7e565b611930565b604051610150979695949392919061307b565b6000806103cc84611c94565b90506103db8160200151611fb5565b6103e481611fd6565b60006103ef84611c94565b90506103fe8160200151611fb5565b61040781611fd6565b60018260400151600281111561041f5761041f613051565b148015610441575060018160400151600281111561043f5761043f613051565b145b156104ab576060808201519083015161045991612040565b80156104a25750815160405160cc9161047191613106565b9081526040519081900360200181208251909161048e9190613106565b9081526040519081900360200190205460ff165b925050506105c8565b6001826040015160028111156104c3576104c3613051565b1480156104e557506002816040015160028111156104e3576104e3613051565b145b1561051b57815160405160cc916104fb91613106565b9081526020016040518091039020816060015160405161048e9190613106565b60028260400151600281111561053357610533613051565b148015610555575060018160400151600281111561055357610553613051565b145b1561056e5760cc82606001516040516104719190613106565b60028260400151600281111561058657610586613051565b1480156105a857506002816040015160028111156105a6576105a6613051565b145b156105c15760cc82606001516040516104fb9190613106565b6000925050505b92915050565b6105d860006120e1565b6105e183612149565b6105ea82612149565b60006105f584611c94565b90506106048160200151611fb5565b61060d81611fd6565b600061061884611c94565b90506106278160200151611fb5565b61063081611fd6565b60018260400151600281111561064857610648613051565b14801561066a575060018160400151600281111561066857610668613051565b145b6106cb5760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a426f7468206d7573742062652060706c6174666f726d6044820152666020726f6c657360c81b60648201526084015b60405180910390fd5b805182516106d891612040565b1561073a5760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a426f746820617265207468652073616d6520706c617460448201526b199bdc9b481858d8dbdd5b9d60a21b60648201526084016106c2565b8260cc836000015160405161074f9190613106565b9081526040519081900360200181208351909161076c9190613106565b90815260405160209181900382018120805460ff19169315159390931790925584151582526001600160a01b0386811692908816917f944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b121891015b60405180910390a35050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361081c5760405162461bcd60e51b81526004016106c290613122565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661084e612198565b6001600160a01b0316146108745760405162461bcd60e51b81526004016106c29061316e565b61087d816121c6565b60408051600080825260208201909252610899918391906121f0565b50565b6000806108a884611c94565b90506108b78160200151611fb5565b6108c081611fd6565b60006108cb84611c94565b90506108da8160200151611fb5565b6108e381611fd6565b6001826040015160028111156108fb576108fb613051565b14801561091d575060018160400151600281111561091b5761091b613051565b145b15610949576060808201519083015161093591612040565b80156104a25750805182516104a291612040565b60018260400151600281111561096157610961613051565b148015610983575060028160400151600281111561098157610981613051565b145b1561099857606081015182516104a291612040565b6002826040015160028111156109b0576109b0613051565b1480156109d257506001816040015160028111156109d0576109d0613051565b145b156109e757606082015181516104a291612040565b6002826040015160028111156109ff576109ff613051565b148015610a215750600281604001516002811115610a1f57610a1f613051565b145b156105c157606080820151908301516104a291612040565b600080610a4585611c94565b9050610a548160200151611fb5565b610a5d81611fd6565b610a6684612149565b610a6f83612334565b6000610a7f826040015186612383565b9050600060ca600084604001516002811115610a9d57610a9d613051565b6002811115610aae57610aae613051565b81526020019081526020016000208281548110610acd57610acd6131ba565b600091825260208083206001600160e01b0319891684526002600390930201919091019052604090205411925050505b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b4c5760405162461bcd60e51b81526004016106c290613122565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b7e612198565b6001600160a01b031614610ba45760405162461bcd60e51b81526004016106c29061316e565b610bad826121c6565b610bb9828260016121f0565b5050565b6033546001600160a01b03163314610be75760405162461bcd60e51b81526004016106c2906131d0565b610bf16000612460565b565b600054610100900460ff1680610c0c575060005460ff16155b610c285760405162461bcd60e51b81526004016106c290613205565b600054610100900460ff16158015610c4a576000805461ffff19166101011790555b610c526124b2565b610c5a612519565b8015610899576000805461ff001916905550565b600080610c7a83611c94565b9050610c898160200151611fb5565b610c9281611fd6565b50600192915050565b610ca560006120e1565b610cae82612149565b610cb781612334565b600060ca6000856002811115610ccf57610ccf613051565b6002811115610ce057610ce0613051565b8152602001908152602001600020610cf88585612383565b81548110610d0857610d086131ba565b600091825260208083206001600160e01b0319861684526002600390930201918201905260409091205490915080610d825760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a66756e6320646f6573206e6f74206578697374732e0060448201526064016106c2565b6000600180840190610d949084613269565b81548110610da457610da46131ba565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550816002016000846001600160e01b0319166001600160e01b031916815260200190815260200160002060009055846002811115610e1357610e13613051565b336001600160a01b03167ffd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e98515341786866040516107c5929190613280565b6060610e5982612149565b60ca6000846002811115610e6f57610e6f613051565b6002811115610e8057610e80613051565b8152602001908152602001600020610e988484612383565b81548110610ea857610ea86131ba565b9060005260206000209060030201600101805480602002602001604051908101604052809291908181526020018280548015610f3057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ef25790505b5050505050905092915050565b600080610f4985612580565b91509150610f5681611fd6565b610f608282612643565b80610f805750600081604001516002811115610f7e57610f7e613051565b145b610fde5760405162461bcd60e51b815260206004820152602960248201527f417574686f726974793a204163636f756e74277320726f6c6520646f6573206e6044820152686f74206d617463682160b81b60648201526084016106c2565b600281604001516002811115610ff657610ff6613051565b0361103b5760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a2077726f6e6720726f6c6560581b60448201526064016106c2565b60008160400151600281111561105357611053613051565b036111775782156110d45783600181111561107057611070613051565b8260800151600181111561108657611086613051565b036110a35760405162461bcd60e51b81526004016106c2906132a3565b608082018460018111156110b9576110b9613051565b908160018111156110cc576110cc613051565b905250611206565b8360018111156110e6576110e6613051565b8260a0015160018111156110fc576110fc613051565b036111615760405162461bcd60e51b815260206004820152602f60248201527f417574686f726974793a204f70657261746f72537461746520646f65736e277460448201526e206e65656420746f206368616e676560881b60648201526084016106c2565b60a082018460018111156110b9576110b9613051565b60018160400151600281111561118f5761118f613051565b03611206578360018111156111a6576111a6613051565b826080015160018111156111bc576111bc613051565b036111d95760405162461bcd60e51b81526004016106c2906132a3565b608082018460018111156111ef576111ef613051565b9081600181111561120257611202613051565b9052505b6001600160a01b038516600090815260c9602052604090208251839190819061122f908261337a565b5060208201516001820190611244908261337a565b5060408201518160020160006101000a81548160ff0219169083600281111561126f5761126f613051565b021790555060608201516003820190611288908261337a565b50608082015160048201805460ff1916600183818111156112ab576112ab613051565b021790555060a082015160048201805461ff0019166101008360018111156112d5576112d5613051565b021790555060c082015160058201906112ee908261337a565b505050608082015160a08301516040516001600160a01b038816927f3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f926113349261343a565b60405180910390a25050505050565b61134d60016120e1565b61135682612657565b61135f836126b8565b600061136a33611c94565b905061137e8483836000015186600261271e565b50505050565b6033546001600160a01b031633146113ae5760405162461bcd60e51b81526004016106c2906131d0565b80516000036113ff5760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a204449442063616e6e6f7420626520656d707479210060448201526064016106c2565b61140882612657565b611411836126b8565b61141f83828385600061271e565b505050565b61142e60006120e1565b61143783612657565b611440846126b8565b805160029060000361146057600061145733611c94565b51925060019150505b61146d858484878561271e565b5050505050565b60008061148084611c94565b905061148f8160200151611fb5565b61149881611fd6565b8260028111156114aa576114aa613051565b60ff16816040015160028111156114c3576114c3613051565b60ff1614949350505050565b6033546001600160a01b031633146114f95760405162461bcd60e51b81526004016106c2906131d0565b6001600160a01b03811661155e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c2565b61089981612460565b61157160006120e1565b61157a82612149565b61158381612334565b60008060cb600086600281111561159c5761159c613051565b60028111156115ad576115ad613051565b81526020019081526020016000206000856001600160a01b03166001600160a01b03168152602001908152602001600020549050806000036117b857600060ca600087600281111561160157611601613051565b600281111561161257611612613051565b815260200190815260200160002080549050905060ca600087600281111561163c5761163c613051565b600281111561164d5761164d613051565b81526020810191909152604001600090812080546001018155815260ca9087600281111561167d5761167d613051565b600281111561168e5761168e613051565b815260200190815260200160002081815481106116ad576116ad6131ba565b9060005260206000209060030201925060ca60008760028111156116d3576116d3613051565b60028111156116e4576116e4613051565b81526020019081526020016000208054905060cb600088600281111561170c5761170c613051565b600281111561171d5761171d613051565b8152602080820192909252604090810160009081206001600160a01b038a168083529084528282209490945586546001600160a01b03191690931786556001808701805491820181558085528385206008830401805463ffffffff60079094166004026101000a938402191660e08b901c9390930292909217909155546001600160e01b0319881684526002870190925290912055506118e3565b60ca60008660028111156117ce576117ce613051565b60028111156117df576117df613051565b81526020019081526020016000206001826117fa9190613269565b8154811061180a5761180a6131ba565b600091825260208083206001600160e01b03198716845260026003909302019182019052604090912054909250156118845760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a2066756e6320616c7265616479206578697374732e0060448201526064016106c2565b600182810180549182018155600081815260208082206008850401805463ffffffff60079096166004026101000a958602191660e089901c959095029490941790935590546001600160e01b0319861682526002850190925260409020555b8460028111156118f5576118f5613051565b336001600160a01b03167fd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e65086866040516107c5929190613280565b606080600060606000806060600060c960008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e001604052908160008201805461197e906132f2565b80601f01602080910402602001604051908101604052809291908181526020018280546119aa906132f2565b80156119f75780601f106119cc576101008083540402835291602001916119f7565b820191906000526020600020905b8154815290600101906020018083116119da57829003601f168201915b50505050508152602001600182018054611a10906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3c906132f2565b8015611a895780601f10611a5e57610100808354040283529160200191611a89565b820191906000526020600020905b815481529060010190602001808311611a6c57829003601f168201915b505050918352505060028281015460209092019160ff1690811115611ab057611ab0613051565b6002811115611ac157611ac1613051565b8152602001600382018054611ad5906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611b01906132f2565b8015611b4e5780601f10611b2357610100808354040283529160200191611b4e565b820191906000526020600020905b815481529060010190602001808311611b3157829003601f168201915b5050509183525050600482015460209091019060ff166001811115611b7557611b75613051565b6001811115611b8657611b86613051565b81526020016004820160019054906101000a900460ff166001811115611bae57611bae613051565b6001811115611bbf57611bbf613051565b8152602001600582018054611bd3906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611bff906132f2565b8015611c4c5780601f10611c2157610100808354040283529160200191611c4c565b820191906000526020600020905b815481529060010190602001808311611c2f57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b611c9c612ba1565b611ca582612149565b6001600160a01b038216600090815260c9602052604090819020815160e08101909252805482908290611cd7906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d03906132f2565b8015611d505780601f10611d2557610100808354040283529160200191611d50565b820191906000526020600020905b815481529060010190602001808311611d3357829003601f168201915b50505050508152602001600182018054611d69906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d95906132f2565b8015611de25780601f10611db757610100808354040283529160200191611de2565b820191906000526020600020905b815481529060010190602001808311611dc557829003601f168201915b505050918352505060028281015460209092019160ff1690811115611e0957611e09613051565b6002811115611e1a57611e1a613051565b8152602001600382018054611e2e906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5a906132f2565b8015611ea75780601f10611e7c57610100808354040283529160200191611ea7565b820191906000526020600020905b815481529060010190602001808311611e8a57829003601f168201915b5050509183525050600482015460209091019060ff166001811115611ece57611ece613051565b6001811115611edf57611edf613051565b81526020016004820160019054906101000a900460ff166001811115611f0757611f07613051565b6001811115611f1857611f18613051565b8152602001600582018054611f2c906132f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f58906132f2565b8015611fa55780601f10611f7a57610100808354040283529160200191611fa5565b820191906000526020600020905b815481529060010190602001808311611f8857829003601f168201915b5050505050815250509050919050565b80516000036108995760405162461bcd60e51b81526004016106c290613455565b611fe88160a001518260800151612894565b6108995760405162461bcd60e51b815260206004820152602360248201527f417574686f726974793a204163636f756e7420686173206265656e2066726f7a604482015262656e2160e81b60648201526084016106c2565b80518251600091849184911461205b576000925050506105c8565b815160005b818110156120d45782818151811061207a5761207a6131ba565b602001015160f81c60f81b6001600160f81b0319168482815181106120a1576120a16131ba565b01602001516001600160f81b031916146120c25760009450505050506105c8565b806120cc81613497565b915050612060565b5060019695505050505050565b6120eb3382611474565b6108995760405162461bcd60e51b815260206004820152602960248201527f417574686f726974793a6e6f742061206f70657261746f7220726f6c65206f7260448201526808191a5cd8589b195960ba1b60648201526084016106c2565b6001600160a01b0381166108995760405162461bcd60e51b8152602060048201526016602482015275417574686f726974793a7a65726f206164647265737360501b60448201526064016106c2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146108995760405162461bcd60e51b81526004016106c2906131d0565b60006121fa612198565b9050612205846128ce565b6000835111806122125750815b15612223576122218484612973565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661146d57805460ff191660011781556040516001600160a01b03831660248201526122a290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612973565b50805460ff191681556122b3612198565b6001600160a01b0316826001600160a01b03161461232b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106c2565b61146d85612a5e565b6001600160e01b031981166108995760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a696e76616c69642073696760581b60448201526064016106c2565b60008060cb600085600281111561239c5761239c613051565b60028111156123ad576123ad613051565b81526020019081526020016000206000846001600160a01b03166001600160a01b031681526020019081526020016000205490506000811161244d5760405162461bcd60e51b815260206004820152603360248201527f417574686f726974793a60726f6c6560206f722060636f6e74726163744164646044820152721c995cdcd808191bd95cdb89dd08195e1a5cdd606a1b60648201526084016106c2565b612458600182613269565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806124cb575060005460ff16155b6124e75760405162461bcd60e51b81526004016106c290613205565b600054610100900460ff16158015612509576000805461ffff19166101011790555b612511612a9e565b610c5a612b08565b600054610100900460ff1680612532575060005460ff16155b61254e5760405162461bcd60e51b81526004016106c290613205565b600054610100900460ff16158015612570576000805461ffff19166101011790555b612578612a9e565b610c5a612a9e565b612588612ba1565b612590612ba1565b600061259b84611c94565b90508060200151516000036125c25760405162461bcd60e51b81526004016106c290613455565b60006125cd33611c94565b90508060200151516000036126395760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a204c65616465724163636f756e74496e666f20646f6560448201526b73206e6f742065786973742160a01b60648201526084016106c2565b9094909350915050565b80516060830151600091610afd9190612040565b80516000036108995760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a204163636f756e744e616d652063616e6e6f7420626560448201526620656d7074792160c81b60648201526084016106c2565b6126c181611c94565b6020015151156108995760405162461bcd60e51b815260206004820152602260248201527f417574686f726974793a204163636f756e7420616c7265616479206578697374604482015261732160f01b60648201526084016106c2565b6040518060e0016040528085815260200183815260200182600281111561274757612747613051565b815260208101859052604001600181526020016001815260408051602081810183526000808352938101919091526001600160a01b038916835260c99052902081518190612795908261337a565b50602082015160018201906127aa908261337a565b5060408201518160020160006101000a81548160ff021916908360028111156127d5576127d5613051565b0217905550606082015160038201906127ee908261337a565b50608082015160048201805460ff19166001838181111561281157612811613051565b021790555060a082015160048201805461ff00191661010083600181111561283b5761283b613051565b021790555060c08201516005820190612854908261337a565b50506040516001600160a01b038716915033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a35050505050565b600060018360018111156128aa576128aa613051565b148015610afd575060018260018111156128c6576128c6613051565b149392505050565b803b6129325760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106c2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6129d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106c2565b600080846001600160a01b0316846040516129ed9190613106565b600060405180830381855af49150503d8060008114612a28576040519150601f19603f3d011682016040523d82523d6000602084013e612a2d565b606091505b5091509150612a5582826040518060600160405280602781526020016134c460279139612b68565b95945050505050565b612a67816128ce565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612ab7575060005460ff16155b612ad35760405162461bcd60e51b81526004016106c290613205565b600054610100900460ff16158015610c5a576000805461ffff19166101011790558015610899576000805461ff001916905550565b600054610100900460ff1680612b21575060005460ff16155b612b3d5760405162461bcd60e51b81526004016106c290613205565b600054610100900460ff16158015612b5f576000805461ffff19166101011790555b610c5a33612460565b60608315612b77575081610afd565b825115612b875782518084602001fd5b8160405162461bcd60e51b81526004016106c291906134b0565b6040805160e0810182526060808252602082015290810160008152606060208201526040016000815260200160008152602001606081525090565b80356001600160a01b0381168114612bf357600080fd5b919050565b60008060408385031215612c0b57600080fd5b612c1483612bdc565b9150612c2260208401612bdc565b90509250929050565b80358015158114612bf357600080fd5b600080600060608486031215612c5057600080fd5b612c5984612bdc565b9250612c6760208501612bdc565b9150612c7560408501612c2b565b90509250925092565b600060208284031215612c9057600080fd5b610afd82612bdc565b80356001600160e01b031981168114612bf357600080fd5b600080600060608486031215612cc657600080fd5b612ccf84612bdc565b9250612cdd60208501612bdc565b9150612c7560408501612c99565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612d1c57612d1c612ceb565b604051601f8501601f19908116603f01168101908282118183101715612d4457612d44612ceb565b81604052809350858152868686011115612d5d57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215612d8a57600080fd5b612d9383612bdc565b9150602083013567ffffffffffffffff811115612daf57600080fd5b8301601f81018513612dc057600080fd5b612dcf85823560208401612d01565b9150509250929050565b803560038110612bf357600080fd5b600080600060608486031215612dfd57600080fd5b612ccf84612dd9565b60008060408385031215612e1957600080fd5b612c1483612dd9565b6020808252825182820181905260009190848201906040850190845b81811015612e645783516001600160e01b03191683529284019291840191600101612e3e565b50909695505050505050565b600080600060608486031215612e8557600080fd5b612e8e84612bdc565b9250602084013560028110612c6757600080fd5b600082601f830112612eb357600080fd5b610afd83833560208501612d01565b600080600060608486031215612ed757600080fd5b612ee084612bdc565b9250602084013567ffffffffffffffff80821115612efd57600080fd5b612f0987838801612ea2565b93506040860135915080821115612f1f57600080fd5b50612f2c86828701612ea2565b9150509250925092565b60008060008060808587031215612f4c57600080fd5b612f5585612bdc565b9350602085013567ffffffffffffffff80821115612f7257600080fd5b612f7e88838901612ea2565b94506040870135915080821115612f9457600080fd5b612fa088838901612ea2565b93506060870135915080821115612fb657600080fd5b50612fc387828801612ea2565b91505092959194509250565b60008060408385031215612fe257600080fd5b612feb83612bdc565b9150612c2260208401612dd9565b60005b83811015613014578181015183820152602001612ffc565b8381111561137e5750506000910152565b6000815180845261303d816020860160208601612ff9565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b6002811061307757613077613051565b9052565b60e08152600061308e60e083018a613025565b82810360208401526130a0818a613025565b9050600388106130b2576130b2613051565b87604084015282810360608401526130ca8188613025565b90506130d96080840187613067565b6130e660a0840186613067565b82810360c08401526130f88185613025565b9a9950505050505050505050565b60008251613118818460208701612ff9565b9190910192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561327b5761327b613253565b500390565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b6020808252602f908201527f417574686f726974793a20506c6174666f726d537461746520646f65736e277460408201526e206e65656420746f206368616e676560881b606082015260800190565b600181811c9082168061330657607f821691505b60208210810361332657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561141f57600081815260208120601f850160051c810160208610156133535750805b601f850160051c820191505b818110156133725782815560010161335f565b505050505050565b815167ffffffffffffffff81111561339457613394612ceb565b6133a8816133a284546132f2565b8461332c565b602080601f8311600181146133dd57600084156133c55750858301515b600019600386901b1c1916600185901b178555613372565b600085815260208120601f198616915b8281101561340c578886015182559484019460019091019084016133ed565b508582101561342a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081016134488285613067565b610afd6020830184613067565b60208082526022908201527f417574686f726974793a204163636f756e7420646f6573206e6f742065786973604082015261742160f01b606082015260800190565b6000600182016134a9576134a9613253565b5060010190565b602081526000610afd602083018461302556fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200bcb991bf196e522ed8940bc1278e05565f7209a4c1b78df212dde0c4d78c9a764736f6c634300080f0033";

    public static final String FUNC_ACCOUNTAVAILABLE = "accountAvailable";

    public static final String FUNC_ADDACCOUNTBYOPERATOR = "addAccountByOperator";

    public static final String FUNC_ADDACCOUNTBYPLATFORM = "addAccountByPlatform";

    public static final String FUNC_ADDFUNCTION = "addFunction";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_CHECKAVAILABLEANDROLE = "checkAvailableAndRole";

    public static final String FUNC_CROSSPLATFORMAPPROVAL = "crossPlatformApproval";

    public static final String FUNC_CROSSPLATFORMCHECK = "crossPlatformCheck";

    public static final String FUNC_DELFUNCTION = "delFunction";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_GETFUNCTIONS = "getFunctions";

    public static final String FUNC_HASFUNCTIONPERMISSION = "hasFunctionPermission";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ONEPLATFORMCHECK = "onePlatformCheck";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEACCOUNTSTATE = "updateAccountState";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADDACCOUNT_EVENT = new Event("AddAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDFUNCTION_EVENT = new Event("AddFunction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes4>() {}));
    ;

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CROSSPLATFORMAPPROVAL_EVENT = new Event("CrossPlatformApproval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DELFUNCTION_EVENT = new Event("DelFunction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes4>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATEACCOUNTSTATE_EVENT = new Event("UpdateAccountState", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddAccountEventResponse> getAddAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddAccountEventResponse> responses = new ArrayList<AddAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddAccountEventResponse>() {
            @Override
            public AddAccountEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDACCOUNT_EVENT, log);
                AddAccountEventResponse typedResponse = new AddAccountEventResponse();
                typedResponse.log = log;
                typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDACCOUNT_EVENT));
        return addAccountEventFlowable(filter);
    }

    public List<AddFunctionEventResponse> getAddFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTION_EVENT, transactionReceipt);
        ArrayList<AddFunctionEventResponse> responses = new ArrayList<AddFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddFunctionEventResponse>() {
            @Override
            public AddFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDFUNCTION_EVENT, log);
                AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDFUNCTION_EVENT));
        return addFunctionEventFlowable(filter);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<CrossPlatformApprovalEventResponse> getCrossPlatformApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, transactionReceipt);
        ArrayList<CrossPlatformApprovalEventResponse> responses = new ArrayList<CrossPlatformApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CrossPlatformApprovalEventResponse>() {
            @Override
            public CrossPlatformApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, log);
                CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CROSSPLATFORMAPPROVAL_EVENT));
        return crossPlatformApprovalEventFlowable(filter);
    }

    public List<DelFunctionEventResponse> getDelFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELFUNCTION_EVENT, transactionReceipt);
        ArrayList<DelFunctionEventResponse> responses = new ArrayList<DelFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DelFunctionEventResponse>() {
            @Override
            public DelFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELFUNCTION_EVENT, log);
                DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELFUNCTION_EVENT));
        return delFunctionEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<UpdateAccountStateEventResponse> getUpdateAccountStateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, transactionReceipt);
        ArrayList<UpdateAccountStateEventResponse> responses = new ArrayList<UpdateAccountStateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateAccountStateEventResponse>() {
            @Override
            public UpdateAccountStateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, log);
                UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNTSTATE_EVENT));
        return updateAccountStateEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> accountAvailable(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNTAVAILABLE, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByOperator(String account, String accountName, String accountDID, String leaderDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYOPERATOR, 
                Arrays.<Type>asList(new Address(160, account),
                new Utf8String(accountName),
                new Utf8String(accountDID),
                new Utf8String(leaderDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByPlatform(String account, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYPLATFORM, 
                Arrays.<Type>asList(new Address(160, account),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOperator(String operator, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(new Address(160, operator),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkAvailableAndRole(String account, BigInteger role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKAVAILABLEANDROLE, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint8(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crossPlatformApproval(String from, String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSPLATFORMAPPROVAL, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> crossPlatformCheck(String from, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CROSSPLATFORMCHECK, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>> getAccount(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNT, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getFunctions(BigInteger role, String contractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFUNCTIONS, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes4>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasFunctionPermission(String account, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASFUNCTIONPERMISSION, 
                Arrays.<Type>asList(new Address(160, account),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> onePlatformCheck(String acc1, String acc2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONEPLATFORMCHECK, 
                Arrays.<Type>asList(new Address(160, acc1),
                new Address(160, acc2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAccountState(String account, BigInteger state, Boolean changePlatformState) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEACCOUNTSTATE, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint8(state),
                new Bool(changePlatformState)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new Address(160, newImplementation),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddAccountEventResponse extends BaseEventResponse {
        public String caller;

        public String account;
    }

    public static class AddFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class CrossPlatformApprovalEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public Boolean approved;
    }

    public static class DelFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class UpdateAccountStateEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger platformState;

        public BigInteger operatorState;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
