package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Authority extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b50608051613ed562000100600039600081816108bd015281816108fd01528181610d490152610d890152613ed56000f3fe6080604052600436106101665760003560e01c8063a8dd7ce8116100d1578063d3d65ddb1161008a578063ed5cad6411610064578063ed5cad641461040c578063f2fde38b1461042c578063faf3c53f1461044c578063fbcbc0f11461046c57600080fd5b8063d3d65ddb146103b4578063e1576897146103cc578063e3f00c3a146103ec57600080fd5b8063a8dd7ce8146102e7578063b50f1a5e14610307578063b9b89dca14610334578063bac7ad5214610354578063bea24f2014610374578063cf149c6d1461039457600080fd5b80634f1ef286116101235780634f1ef28614610242578063715018a6146102555780638129fc1c1461026a5780638da5cb5b1461027f57806395c2a8d9146102a7578063a6ff8f0c146102c757600080fd5b806301843caa1461016b57806305e847fb146101a05780633659cfe6146101c25780633a723d17146101e25780634020895014610202578063470cf0e014610222575b600080fd5b34801561017757600080fd5b5061018b610186366004613382565b61049f565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb3660046133c5565b6106ad565b005b3480156101ce57600080fd5b506101c06101dd366004613408565b6108b3565b3480156101ee57600080fd5b5061018b6101fd366004613382565b61097b565b34801561020e57600080fd5b506101c061021d3660046135f8565b610b18565b34801561022e57600080fd5b5061018b61023d3660046136bd565b610c74565b6101c06102503660046136f7565b610d3f565b34801561026157600080fd5b506101c0610df8565b34801561027657600080fd5b506101c0610e2e565b34801561028b57600080fd5b506033546040516001600160a01b039091168152602001610197565b3480156102b357600080fd5b5061018b6102c2366004613408565b610ea9565b3480156102d357600080fd5b506101c06102e2366004613768565b610ed6565b3480156102f357600080fd5b506101c0610302366004613786565b611089565b34801561031357600080fd5b506103276103223660046137a1565b611141565b60405161019791906137bd565b34801561034057600080fd5b506101c061034f36600461380b565b611230565b34801561036057600080fd5b506101c061036f366004613840565b61133f565b34801561038057600080fd5b506101c061038f366004613872565b61175c565b3480156103a057600080fd5b506101c06103af3660046138e6565b6117a5565b3480156103c057600080fd5b5060ce5460ff1661018b565b3480156103d857600080fd5b506101c06103e7366004613872565b6118e1565b3480156103f857600080fd5b506101c0610407366004613964565b611981565b34801561041857600080fd5b5061018b6104273660046139f1565b6119d3565b34801561043857600080fd5b506101c0610447366004613408565b611a2e565b34801561045857600080fd5b506101c0610467366004613768565b611ac6565b34801561047857600080fd5b5061048c610487366004613408565b611e8f565b6040516101979796959493929190613a9d565b6000806104ab846121f3565b90506104ba8160200151612514565b6104c381612535565b60006104ce846121f3565b90506104dd8160200151612514565b6104e681612535565b6001826040015160028111156104fe576104fe613a73565b148015610520575060018160400151600281111561051e5761051e613a73565b145b1561058a57606080820151908301516105389161259f565b80156105815750815160405160cc9161055091613b28565b9081526040519081900360200181208251909161056d9190613b28565b9081526040519081900360200190205460ff165b925050506106a7565b6001826040015160028111156105a2576105a2613a73565b1480156105c457506002816040015160028111156105c2576105c2613a73565b145b156105fa57815160405160cc916105da91613b28565b9081526020016040518091039020816060015160405161056d9190613b28565b60028260400151600281111561061257610612613a73565b148015610634575060018160400151600281111561063257610632613a73565b145b1561064d5760cc82606001516040516105509190613b28565b60028260400151600281111561066557610665613a73565b148015610687575060028160400151600281111561068557610685613a73565b145b156106a05760cc82606001516040516105da9190613b28565b6000925050505b92915050565b6106b76000612640565b6106c0836126a4565b6106c9826126a4565b60006106d4846121f3565b90506106e38160200151612514565b6106ec81612535565b60006106f7846121f3565b90506107068160200151612514565b61070f81612535565b60018260400151600281111561072757610727613a73565b148015610749575060018160400151600281111561074757610747613a73565b145b6107aa5760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a426f7468206d7573742062652060706c6174666f726d6044820152666020726f6c657360c81b60648201526084015b60405180910390fd5b805182516107b79161259f565b156108195760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a426f746820617265207468652073616d6520706c617460448201526b199bdc9b481858d8dbdd5b9d60a21b60648201526084016107a1565b8260cc836000015160405161082e9190613b28565b9081526040519081900360200181208351909161084b9190613b28565b90815260405160209181900382018120805460ff19169315159390931790925584151582526001600160a01b0386811692908816917f944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b121891015b60405180910390a35050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108fb5760405162461bcd60e51b81526004016107a190613b44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092d6126f3565b6001600160a01b0316146109535760405162461bcd60e51b81526004016107a190613b90565b61095c81612721565b604080516000808252602082019092526109789183919061274b565b50565b600080610987846121f3565b90506109968160200151612514565b61099f81612535565b60006109aa846121f3565b90506109b98160200151612514565b6109c281612535565b6001826040015160028111156109da576109da613a73565b1480156109fc57506001816040015160028111156109fa576109fa613a73565b145b15610a285760608082015190830151610a149161259f565b80156105815750805182516105819161259f565b600182604001516002811115610a4057610a40613a73565b148015610a625750600281604001516002811115610a6057610a60613a73565b145b15610a7757606081015182516105819161259f565b600282604001516002811115610a8f57610a8f613a73565b148015610ab15750600181604001516002811115610aaf57610aaf613a73565b145b15610ac657606082015181516105819161259f565b600282604001516002811115610ade57610ade613a73565b148015610b005750600281604001516002811115610afe57610afe613a73565b145b156106a057606080820151908301516105819161259f565b610b226000612640565b82518451148015610b34575081518351145b8015610b41575080518251145b610b8d5760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107a1565b60005b8451811015610c1b57610c09858281518110610bae57610bae613bdc565b6020026020010151858381518110610bc857610bc8613bdc565b6020026020010151858481518110610be257610be2613bdc565b6020026020010151858581518110610bfc57610bfc613bdc565b6020026020010151612896565b80610c1381613c08565b915050610b90565b5083604051610c2a9190613c21565b6040518091039020610c393390565b6001600160a01b03167f697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b960405160405180910390a350505050565b600080610c80856121f3565b9050610c8f8160200151612514565b610c9881612535565b610ca1846126a4565b610caa836129df565b6000610cba826040015186612a2e565b9050600060ca600084604001516002811115610cd857610cd8613a73565b6002811115610ce957610ce9613a73565b81526020019081526020016000208281548110610d0857610d08613bdc565b600091825260208083206001600160e01b0319891684526002600390930201919091019052604090205411925050505b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d875760405162461bcd60e51b81526004016107a190613b44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610db96126f3565b6001600160a01b031614610ddf5760405162461bcd60e51b81526004016107a190613b90565b610de882612721565b610df48282600161274b565b5050565b6033546001600160a01b03163314610e225760405162461bcd60e51b81526004016107a190613c60565b610e2c6000612b0b565b565b600054610100900460ff1680610e47575060005460ff16155b610e635760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015610e85576000805461ffff19166101011790555b610e8d612b5d565b610e95612bc4565b8015610978576000805461ff001916905550565b600080610eb5836121f3565b9050610ec48160200151612514565b610ecd81612535565b50600192915050565b610ee06000612640565b610ee9826126a4565b610ef2816129df565b600060ca6000856002811115610f0a57610f0a613a73565b6002811115610f1b57610f1b613a73565b8152602001908152602001600020610f338585612a2e565b81548110610f4357610f43613bdc565b600091825260208083206001600160e01b0319861684526002600390930201918201905260409091205490915080610fbd5760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a66756e6320646f6573206e6f7420657869737473000060448201526064016107a1565b6000600180840190610fcf9084613ce3565b81548110610fdf57610fdf613bdc565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550816002016000846001600160e01b0319166001600160e01b03191681526020019081526020016000206000905584600281111561104e5761104e613a73565b336001600160a01b03167ffd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e98515341786866040516108a4929190613cfa565b6110936000612640565b60ce5460ff161515811515036110eb5760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206f7065726174696f6e000000000060448201526064016107a1565b60ce805460ff1916821515179055336001600160a01b03167f548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d7986082604051611136911515815260200190565b60405180910390a250565b606061114c826126a4565b60ca600084600281111561116257611162613a73565b600281111561117357611173613a73565b815260200190815260200160002061118b8484612a2e565b8154811061119b5761119b613bdc565b906000526020600020906003020160010180548060200260200160405190810160405280929190818152602001828054801561122357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111e55790505b5050505050905092915050565b61123a6000612640565b60005b81518110156113055781818151811061125857611258613bdc565b6020026020010151516000036112a85760405162461bcd60e51b8152602060048201526015602482015274105d5d1a1bdc9a5d1e4e9a5b9d985b1a5908191a59605a1b60448201526064016107a1565b600160cd8383815181106112be576112be613bdc565b60200260200101516040516112d39190613b28565b908152604051908190036020019020805491151560ff19909216919091179055806112fd81613c08565b91505061123d565b50336001600160a01b03167f199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec826040516111369190613d1d565b60008061134b85612c2b565b9150915061135881612535565b6113628282612cee565b80611382575060008160400151600281111561138057611380613a73565b145b6113df5760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a204163636f756e74277320726f6c6520646f6573206e6044820152670dee840dac2e8c6d60c31b60648201526084016107a1565b6002816040015160028111156113f7576113f7613a73565b0361143c5760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a2077726f6e6720726f6c6560581b60448201526064016107a1565b60008160400151600281111561145457611454613a73565b036115785782156114d55783600181111561147157611471613a73565b8260800151600181111561148757611487613a73565b036114a45760405162461bcd60e51b81526004016107a190613d7f565b608082018460018111156114ba576114ba613a73565b908160018111156114cd576114cd613a73565b905250611607565b8360018111156114e7576114e7613a73565b8260a0015160018111156114fd576114fd613a73565b036115625760405162461bcd60e51b815260206004820152602f60248201527f417574686f726974793a204f70657261746f72537461746520646f65736e277460448201526e206e65656420746f206368616e676560881b60648201526084016107a1565b60a082018460018111156114ba576114ba613a73565b60018160400151600281111561159057611590613a73565b03611607578360018111156115a7576115a7613a73565b826080015160018111156115bd576115bd613a73565b036115da5760405162461bcd60e51b81526004016107a190613d7f565b608082018460018111156115f0576115f0613a73565b9081600181111561160357611603613a73565b9052505b6001600160a01b038516600090815260c960209081526040909120835180518593611636928492910190613292565b50602082810151805161164f9260018501920190613292565b5060408201518160020160006101000a81548160ff0219169083600281111561167a5761167a613a73565b02179055506060820151805161169a916003840191602090910190613292565b50608082015160048201805460ff1916600183818111156116bd576116bd613a73565b021790555060a082015160048201805461ff0019166101008360018111156116e7576116e7613a73565b021790555060c08201518051611707916005840191602090910190613292565b505050608082015160a08301516040516001600160a01b038816927f3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f9261174d92613dce565b60405180910390a25050505050565b6117666001612640565b61176e612d02565b61177782612d65565b61178083612dc6565b600061178b336121f3565b905061179f84838360000151866002612e2c565b50505050565b6117af6001612640565b815183511480156117c1575080518251145b61180d5760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107a1565b6000611818336121f3565b905060005b8451811015610c1b5761182e612d02565b61185084828151811061184357611843613bdc565b6020026020010151612d65565b61187285828151811061186557611865613bdc565b6020026020010151612dc6565b6118cf85828151811061188757611887613bdc565b60200260200101518483815181106118a1576118a1613bdc565b602002602001015184600001518785815181106118c0576118c0613bdc565b60200260200101516002612e2c565b806118d981613c08565b91505061181d565b6033546001600160a01b0316331461190b5760405162461bcd60e51b81526004016107a190613c60565b805160000361195c5760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a204449442063616e6e6f7420626520656d707479210060448201526064016107a1565b61196582612d65565b61196e83612dc6565b61197c838283856000612e2c565b505050565b61198b6000612640565b61199784848484612896565b6040516001600160a01b0385169033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a350505050565b6000806119df846121f3565b90506119ee8160200151612514565b6119f781612535565b826002811115611a0957611a09613a73565b60ff1681604001516002811115611a2257611a22613a73565b60ff1614949350505050565b6033546001600160a01b03163314611a585760405162461bcd60e51b81526004016107a190613c60565b6001600160a01b038116611abd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107a1565b61097881612b0b565b611ad06000612640565b611ad9826126a4565b611ae2816129df565b60008060cb6000866002811115611afb57611afb613a73565b6002811115611b0c57611b0c613a73565b81526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003611d1757600060ca6000876002811115611b6057611b60613a73565b6002811115611b7157611b71613a73565b815260200190815260200160002080549050905060ca6000876002811115611b9b57611b9b613a73565b6002811115611bac57611bac613a73565b81526020810191909152604001600090812080546001018155815260ca90876002811115611bdc57611bdc613a73565b6002811115611bed57611bed613a73565b81526020019081526020016000208181548110611c0c57611c0c613bdc565b9060005260206000209060030201925060ca6000876002811115611c3257611c32613a73565b6002811115611c4357611c43613a73565b81526020019081526020016000208054905060cb6000886002811115611c6b57611c6b613a73565b6002811115611c7c57611c7c613a73565b8152602080820192909252604090810160009081206001600160a01b038a168083529084528282209490945586546001600160a01b03191690931786556001808701805491820181558085528385206008830401805463ffffffff60079094166004026101000a938402191660e08b901c9390930292909217909155546001600160e01b031988168452600287019092529091205550611e42565b60ca6000866002811115611d2d57611d2d613a73565b6002811115611d3e57611d3e613a73565b8152602001908152602001600020600182611d599190613ce3565b81548110611d6957611d69613bdc565b600091825260208083206001600160e01b0319871684526002600390930201918201905260409091205490925015611de35760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a2066756e6320616c726561647920657869737473000060448201526064016107a1565b600182810180549182018155600081815260208082206008850401805463ffffffff60079096166004026101000a958602191660e089901c959095029490941790935590546001600160e01b0319861682526002850190925260409020555b846002811115611e5457611e54613a73565b336001600160a01b03167fd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e65086866040516108a4929190613cfa565b606080600060606000806060600060c960008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040529081600082018054611edd90613de9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0990613de9565b8015611f565780601f10611f2b57610100808354040283529160200191611f56565b820191906000526020600020905b815481529060010190602001808311611f3957829003601f168201915b50505050508152602001600182018054611f6f90613de9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9b90613de9565b8015611fe85780601f10611fbd57610100808354040283529160200191611fe8565b820191906000526020600020905b815481529060010190602001808311611fcb57829003601f168201915b505050918352505060028281015460209092019160ff169081111561200f5761200f613a73565b600281111561202057612020613a73565b815260200160038201805461203490613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461206090613de9565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b5050509183525050600482015460209091019060ff1660018111156120d4576120d4613a73565b60018111156120e5576120e5613a73565b81526020016004820160019054906101000a900460ff16600181111561210d5761210d613a73565b600181111561211e5761211e613a73565b815260200160058201805461213290613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461215e90613de9565b80156121ab5780601f10612180576101008083540402835291602001916121ab565b820191906000526020600020905b81548152906001019060200180831161218e57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b6121fb613316565b612204826126a4565b6001600160a01b038216600090815260c9602052604090819020815160e0810190925280548290829061223690613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461226290613de9565b80156122af5780601f10612284576101008083540402835291602001916122af565b820191906000526020600020905b81548152906001019060200180831161229257829003601f168201915b505050505081526020016001820180546122c890613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546122f490613de9565b80156123415780601f1061231657610100808354040283529160200191612341565b820191906000526020600020905b81548152906001019060200180831161232457829003601f168201915b505050918352505060028281015460209092019160ff169081111561236857612368613a73565b600281111561237957612379613a73565b815260200160038201805461238d90613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546123b990613de9565b80156124065780601f106123db57610100808354040283529160200191612406565b820191906000526020600020905b8154815290600101906020018083116123e957829003601f168201915b5050509183525050600482015460209091019060ff16600181111561242d5761242d613a73565b600181111561243e5761243e613a73565b81526020016004820160019054906101000a900460ff16600181111561246657612466613a73565b600181111561247757612477613a73565b815260200160058201805461248b90613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546124b790613de9565b80156125045780601f106124d957610100808354040283529160200191612504565b820191906000526020600020905b8154815290600101906020018083116124e757829003601f168201915b5050505050815250509050919050565b80516000036109785760405162461bcd60e51b81526004016107a190613e23565b6125478160a001518260800151612f85565b6109785760405162461bcd60e51b815260206004820152602360248201527f417574686f726974793a204163636f756e7420686173206265656e2066726f7a604482015262656e2160e81b60648201526084016107a1565b8051825160009184918491146125ba576000925050506106a7565b815160005b81811015612633578281815181106125d9576125d9613bdc565b602001015160f81c60f81b6001600160f81b03191684828151811061260057612600613bdc565b01602001516001600160f81b031916146126215760009450505050506106a7565b8061262b81613c08565b9150506125bf565b5060019695505050505050565b61264a33826119d3565b6109785760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a20696e636f727265637420726f6c65206f722064697360448201526418589b195960da1b60648201526084016107a1565b6001600160a01b0381166109785760405162461bcd60e51b8152602060048201526016602482015275417574686f726974793a7a65726f206164647265737360501b60448201526064016107a1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109785760405162461bcd60e51b81526004016107a190613c60565b60006127556126f3565b905061276084612fbf565b60008351118061276d5750815b1561277e5761277c8484613064565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661288f57805460ff191660011781556040516001600160a01b03831660248201526127fd90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613064565b50805460ff1916815561280e6126f3565b6001600160a01b0316826001600160a01b0316146128865760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107a1565b61288f8561314f565b5050505050565b61289f83612d65565b6128a884612dc6565b80516002906000036129635782516000036129135760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a206163636f756e744449442063616e6e6f7420626520604482015264656d70747960d81b60648201526084016107a1565b600061291e336121f3565b90508060000151925060019150600160cd8560405161293d9190613b28565b908152604051908190036020019020805491151560ff19909216919091179055506129d2565b60cd826040516129739190613b28565b9081526040519081900360200190205460ff166129d25760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206c6561646572444944000000000060448201526064016107a1565b61288f8584848785612e2c565b6001600160e01b031981166109785760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a696e76616c69642073696760581b60448201526064016107a1565b60008060cb6000856002811115612a4757612a47613a73565b6002811115612a5857612a58613a73565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111612af85760405162461bcd60e51b815260206004820152603360248201527f417574686f726974793a60726f6c6560206f722060636f6e74726163744164646044820152721c995cdcd808191bd95cdb89dd08195e1a5cdd606a1b60648201526084016107a1565b612b03600182613ce3565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680612b76575060005460ff16155b612b925760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015612bb4576000805461ffff19166101011790555b612bbc61318f565b610e956131f9565b600054610100900460ff1680612bdd575060005460ff16155b612bf95760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015612c1b576000805461ffff19166101011790555b612c2361318f565b610e9561318f565b612c33613316565b612c3b613316565b6000612c46846121f3565b9050806020015151600003612c6d5760405162461bcd60e51b81526004016107a190613e23565b6000612c78336121f3565b9050806020015151600003612ce45760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a204c65616465724163636f756e74496e666f20646f6560448201526b73206e6f742065786973742160a01b60648201526084016107a1565b9094909350915050565b80516060830151600091610d38919061259f565b60ce5460ff16610e2c5760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a7377697463686572206f6620706c6174666f726d20696044820152671cc818db1bdcd95960c21b60648201526084016107a1565b80516000036109785760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a204163636f756e744e616d652063616e6e6f7420626560448201526620656d7074792160c81b60648201526084016107a1565b612dcf816121f3565b6020015151156109785760405162461bcd60e51b815260206004820152602260248201527f417574686f726974793a204163636f756e7420616c7265616479206578697374604482015261732160f01b60648201526084016107a1565b6040518060e00160405280858152602001838152602001826002811115612e5557612e55613a73565b815260208101859052604001600181526020016001815260408051602081810183526000808352938101919091526001600160a01b038916835260c981529120825180519192612eaa92849290910190613292565b506020828101518051612ec39260018501920190613292565b5060408201518160020160006101000a81548160ff02191690836002811115612eee57612eee613a73565b021790555060608201518051612f0e916003840191602090910190613292565b50608082015160048201805460ff191660018381811115612f3157612f31613a73565b021790555060a082015160048201805461ff001916610100836001811115612f5b57612f5b613a73565b021790555060c08201518051612f7b916005840191602090910190613292565b5050505050505050565b60006001836001811115612f9b57612f9b613a73565b148015610d3857506001826001811115612fb757612fb7613a73565b149392505050565b803b6130235760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107a1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6130c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107a1565b600080846001600160a01b0316846040516130de9190613b28565b600060405180830381855af49150503d8060008114613119576040519150601f19603f3d011682016040523d82523d6000602084013e61311e565b606091505b50915091506131468282604051806060016040528060278152602001613e7960279139613259565b95945050505050565b61315881612fbf565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16806131a8575060005460ff16155b6131c45760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015610e95576000805461ffff19166101011790558015610978576000805461ff001916905550565b600054610100900460ff1680613212575060005460ff16155b61322e5760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015613250576000805461ffff19166101011790555b610e9533612b0b565b60608315613268575081610d38565b8251156132785782518084602001fd5b8160405162461bcd60e51b81526004016107a19190613e65565b82805461329e90613de9565b90600052602060002090601f0160209004810192826132c05760008555613306565b82601f106132d957805160ff1916838001178555613306565b82800160010185558215613306579182015b828111156133065782518255916020019190600101906132eb565b50613312929150613351565b5090565b6040805160e0810182526060808252602082015290810160008152606060208201526040016000815260200160008152602001606081525090565b5b808211156133125760008155600101613352565b80356001600160a01b038116811461337d57600080fd5b919050565b6000806040838503121561339557600080fd5b61339e83613366565b91506133ac60208401613366565b90509250929050565b8035801515811461337d57600080fd5b6000806000606084860312156133da57600080fd5b6133e384613366565b92506133f160208501613366565b91506133ff604085016133b5565b90509250925092565b60006020828403121561341a57600080fd5b610d3882613366565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561346257613462613423565b604052919050565b600067ffffffffffffffff82111561348457613484613423565b5060051b60200190565b600082601f83011261349f57600080fd5b813560206134b46134af8361346a565b613439565b82815260059290921b840181019181810190868411156134d357600080fd5b8286015b848110156134f5576134e881613366565b83529183019183016134d7565b509695505050505050565b600067ffffffffffffffff83111561351a5761351a613423565b61352d601f8401601f1916602001613439565b905082815283838301111561354157600080fd5b828260208301376000602084830101529392505050565b600082601f83011261356957600080fd5b610d3883833560208501613500565b600082601f83011261358957600080fd5b813560206135996134af8361346a565b82815260059290921b840181019181810190868411156135b857600080fd5b8286015b848110156134f557803567ffffffffffffffff8111156135dc5760008081fd5b6135ea8986838b0101613558565b8452509183019183016135bc565b6000806000806080858703121561360e57600080fd5b843567ffffffffffffffff8082111561362657600080fd5b6136328883890161348e565b9550602087013591508082111561364857600080fd5b61365488838901613578565b9450604087013591508082111561366a57600080fd5b61367688838901613578565b9350606087013591508082111561368c57600080fd5b5061369987828801613578565b91505092959194509250565b80356001600160e01b03198116811461337d57600080fd5b6000806000606084860312156136d257600080fd5b6136db84613366565b92506136e960208501613366565b91506133ff604085016136a5565b6000806040838503121561370a57600080fd5b61371383613366565b9150602083013567ffffffffffffffff81111561372f57600080fd5b8301601f8101851361374057600080fd5b61374f85823560208401613500565b9150509250929050565b80356003811061337d57600080fd5b60008060006060848603121561377d57600080fd5b6136db84613759565b60006020828403121561379857600080fd5b610d38826133b5565b600080604083850312156137b457600080fd5b61339e83613759565b6020808252825182820181905260009190848201906040850190845b818110156137ff5783516001600160e01b031916835292840192918401916001016137d9565b50909695505050505050565b60006020828403121561381d57600080fd5b813567ffffffffffffffff81111561383457600080fd5b612b0384828501613578565b60008060006060848603121561385557600080fd5b61385e84613366565b92506020840135600281106133f157600080fd5b60008060006060848603121561388757600080fd5b61389084613366565b9250602084013567ffffffffffffffff808211156138ad57600080fd5b6138b987838801613558565b935060408601359150808211156138cf57600080fd5b506138dc86828701613558565b9150509250925092565b6000806000606084860312156138fb57600080fd5b833567ffffffffffffffff8082111561391357600080fd5b61391f8783880161348e565b9450602086013591508082111561393557600080fd5b61394187838801613578565b9350604086013591508082111561395757600080fd5b506138dc86828701613578565b6000806000806080858703121561397a57600080fd5b61398385613366565b9350602085013567ffffffffffffffff808211156139a057600080fd5b6139ac88838901613558565b945060408701359150808211156139c257600080fd5b6139ce88838901613558565b935060608701359150808211156139e457600080fd5b5061369987828801613558565b60008060408385031215613a0457600080fd5b613a0d83613366565b91506133ac60208401613759565b60005b83811015613a36578181015183820152602001613a1e565b8381111561179f5750506000910152565b60008151808452613a5f816020860160208601613a1b565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60028110613a9957613a99613a73565b9052565b60e081526000613ab060e083018a613a47565b8281036020840152613ac2818a613a47565b905060038810613ad457613ad4613a73565b8760408401528281036060840152613aec8188613a47565b9050613afb6080840187613a89565b613b0860a0840186613a89565b82810360c0840152613b1a8185613a47565b9a9950505050505050505050565b60008251613b3a818460208701613a1b565b9190910192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c1a57613c1a613bf2565b5060010190565b815160009082906020808601845b83811015613c545781516001600160a01b031685529382019390820190600101613c2f565b50929695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015613cf557613cf5613bf2565b500390565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613d7257603f19888603018452613d60858351613a47565b94509285019290850190600101613d44565b5092979650505050505050565b6020808252602f908201527f417574686f726974793a20506c6174666f726d537461746520646f65736e277460408201526e206e65656420746f206368616e676560881b606082015260800190565b60408101613ddc8285613a89565b610d386020830184613a89565b600181811c90821680613dfd57607f821691505b602082108103613e1d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f417574686f726974793a204163636f756e7420646f6573206e6f742065786973604082015261742160f01b606082015260800190565b602081526000610d386020830184613a4756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122064e1731802d875e54503aa843d2cdb4e45ea1544263d51812bfd58d2ee0423c764736f6c634300080e0033";

    public static final String FUNC_ACCOUNTAVAILABLE = "accountAvailable";

    public static final String FUNC_ADDACCOUNTBYOPERATOR = "addAccountByOperator";

    public static final String FUNC_ADDACCOUNTBYPLATFORM = "addAccountByPlatform";

    public static final String FUNC_ADDBATCHACCOUNTBYOPERATOR = "addBatchAccountByOperator";

    public static final String FUNC_ADDBATCHACCOUNTBYPLATFORM = "addBatchAccountByPlatform";

    public static final String FUNC_ADDFUNCTION = "addFunction";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_CHECKAVAILABLEANDROLE = "checkAvailableAndRole";

    public static final String FUNC_CROSSPLATFORMAPPROVAL = "crossPlatformApproval";

    public static final String FUNC_CROSSPLATFORMCHECK = "crossPlatformCheck";

    public static final String FUNC_DELFUNCTION = "delFunction";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_GETFUNCTIONS = "getFunctions";

    public static final String FUNC_HASFUNCTIONPERMISSION = "hasFunctionPermission";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ONEPLATFORMCHECK = "onePlatformCheck";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETSWITCHERSTATEOFPLATFORM = "setSwitcherStateOfPlatform";

    public static final String FUNC_SWITCHERSTATEOFPLATFORM = "switcherStateOfPlatform";

    public static final String FUNC_SYNCPLATFORMDID = "syncPlatformDID";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEACCOUNTSTATE = "updateAccountState";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADDACCOUNT_EVENT = new Event("AddAccount",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ADDBATCHACCOUNT_EVENT = new Event("AddBatchAccount",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Address>>(true) {
            }));
    ;

    public static final Event ADDFUNCTION_EVENT = new Event("AddFunction",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<Bytes4>() {
            }));
    ;

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event CROSSPLATFORMAPPROVAL_EVENT = new Event("CrossPlatformApproval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event DELFUNCTION_EVENT = new Event("DelFunction",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<Bytes4>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETSWITCHERSTATEOFPLATFORM_EVENT = new Event("SetSwitcherStateOfPlatform",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event SYNCPLATFORMDID_EVENT = new Event("SyncPlatformDID",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Utf8String>>() {
            }));
    ;

    public static final Event UPDATEACCOUNTSTATE_EVENT = new Event("UpdateAccountState",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>() {
            }, new TypeReference<Uint8>() {
            }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddAccountEventResponse> getAddAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddAccountEventResponse> responses = new ArrayList<AddAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddAccountEventResponse>() {
            @Override
            public AddAccountEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDACCOUNT_EVENT, log);
                AddAccountEventResponse typedResponse = new AddAccountEventResponse();
                typedResponse.log = log;
                typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDACCOUNT_EVENT));
        return addAccountEventFlowable(filter);
    }

    public List<AddBatchAccountEventResponse> getAddBatchAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDBATCHACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddBatchAccountEventResponse> responses = new ArrayList<AddBatchAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddBatchAccountEventResponse typedResponse = new AddBatchAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.accounts = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddBatchAccountEventResponse> addBatchAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddBatchAccountEventResponse>() {
            @Override
            public AddBatchAccountEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDBATCHACCOUNT_EVENT, log);
                AddBatchAccountEventResponse typedResponse = new AddBatchAccountEventResponse();
                typedResponse.log = log;
                typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.accounts = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddBatchAccountEventResponse> addBatchAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDBATCHACCOUNT_EVENT));
        return addBatchAccountEventFlowable(filter);
    }

    public List<AddFunctionEventResponse> getAddFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTION_EVENT, transactionReceipt);
        ArrayList<AddFunctionEventResponse> responses = new ArrayList<AddFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddFunctionEventResponse>() {
            @Override
            public AddFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDFUNCTION_EVENT, log);
                AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDFUNCTION_EVENT));
        return addFunctionEventFlowable(filter);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<CrossPlatformApprovalEventResponse> getCrossPlatformApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, transactionReceipt);
        ArrayList<CrossPlatformApprovalEventResponse> responses = new ArrayList<CrossPlatformApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CrossPlatformApprovalEventResponse>() {
            @Override
            public CrossPlatformApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, log);
                CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CROSSPLATFORMAPPROVAL_EVENT));
        return crossPlatformApprovalEventFlowable(filter);
    }

    public List<DelFunctionEventResponse> getDelFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELFUNCTION_EVENT, transactionReceipt);
        ArrayList<DelFunctionEventResponse> responses = new ArrayList<DelFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DelFunctionEventResponse>() {
            @Override
            public DelFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELFUNCTION_EVENT, log);
                DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELFUNCTION_EVENT));
        return delFunctionEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetSwitcherStateOfPlatformEventResponse> getSetSwitcherStateOfPlatformEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETSWITCHERSTATEOFPLATFORM_EVENT, transactionReceipt);
        ArrayList<SetSwitcherStateOfPlatformEventResponse> responses = new ArrayList<SetSwitcherStateOfPlatformEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetSwitcherStateOfPlatformEventResponse typedResponse = new SetSwitcherStateOfPlatformEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetSwitcherStateOfPlatformEventResponse> setSwitcherStateOfPlatformEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetSwitcherStateOfPlatformEventResponse>() {
            @Override
            public SetSwitcherStateOfPlatformEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETSWITCHERSTATEOFPLATFORM_EVENT, log);
                SetSwitcherStateOfPlatformEventResponse typedResponse = new SetSwitcherStateOfPlatformEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetSwitcherStateOfPlatformEventResponse> setSwitcherStateOfPlatformEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSWITCHERSTATEOFPLATFORM_EVENT));
        return setSwitcherStateOfPlatformEventFlowable(filter);
    }

    public List<SyncPlatformDIDEventResponse> getSyncPlatformDIDEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SYNCPLATFORMDID_EVENT, transactionReceipt);
        ArrayList<SyncPlatformDIDEventResponse> responses = new ArrayList<SyncPlatformDIDEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SyncPlatformDIDEventResponse typedResponse = new SyncPlatformDIDEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.dids = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyncPlatformDIDEventResponse> syncPlatformDIDEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyncPlatformDIDEventResponse>() {
            @Override
            public SyncPlatformDIDEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SYNCPLATFORMDID_EVENT, log);
                SyncPlatformDIDEventResponse typedResponse = new SyncPlatformDIDEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.dids = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyncPlatformDIDEventResponse> syncPlatformDIDEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYNCPLATFORMDID_EVENT));
        return syncPlatformDIDEventFlowable(filter);
    }

    public List<UpdateAccountStateEventResponse> getUpdateAccountStateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, transactionReceipt);
        ArrayList<UpdateAccountStateEventResponse> responses = new ArrayList<UpdateAccountStateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateAccountStateEventResponse>() {
            @Override
            public UpdateAccountStateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, log);
                UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNTSTATE_EVENT));
        return updateAccountStateEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> accountAvailable(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNTAVAILABLE,
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByOperator(String account, String accountName, String accountDID, String leaderDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYOPERATOR,
                Arrays.<Type>asList(new Address(160, account),
                        new Utf8String(accountName),
                        new Utf8String(accountDID),
                        new Utf8String(leaderDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByPlatform(String account, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYPLATFORM,
                Arrays.<Type>asList(new Address(160, account),
                        new Utf8String(accountName),
                        new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addBatchAccountByOperator(List<String> accounts, List<String> accountNames, List<String> accountDIDs, List<String> leaderDIDs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDBATCHACCOUNTBYOPERATOR,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(accountNames, Utf8String.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(accountDIDs, Utf8String.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(leaderDIDs, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addBatchAccountByPlatform(List<String> accounts, List<String> accountNames, List<String> accountDIDs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDBATCHACCOUNTBYPLATFORM,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(accountNames, Utf8String.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(accountDIDs, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDFUNCTION,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOperator(String operator, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOPERATOR,
                Arrays.<Type>asList(new Address(160, operator),
                        new Utf8String(accountName),
                        new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkAvailableAndRole(String account, BigInteger role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKAVAILABLEANDROLE,
                Arrays.<Type>asList(new Address(160, account),
                        new Uint8(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crossPlatformApproval(String from, String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSPLATFORMAPPROVAL,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> crossPlatformCheck(String from, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CROSSPLATFORMCHECK,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELFUNCTION,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>> getAccount(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNT,
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getFunctions(BigInteger role, String contractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFUNCTIONS,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes4>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasFunctionPermission(String account, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASFUNCTIONPERMISSION,
                Arrays.<Type>asList(new Address(160, account),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> onePlatformCheck(String acc1, String acc2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONEPLATFORMCHECK,
                Arrays.<Type>asList(new Address(160, acc1),
                        new Address(160, acc2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwitcherStateOfPlatform(Boolean isOpen) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWITCHERSTATEOFPLATFORM,
                Arrays.<Type>asList(new Bool(isOpen)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> switcherStateOfPlatform() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWITCHERSTATEOFPLATFORM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> syncPlatformDID(List<String> dids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYNCPLATFORMDID,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(dids, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAccountState(String account, BigInteger state, Boolean changePlatformState) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEACCOUNTSTATE,
                Arrays.<Type>asList(new Address(160, account),
                        new Uint8(state),
                        new Bool(changePlatformState)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddAccountEventResponse extends BaseEventResponse {
        public String caller;

        public String account;
    }

    public static class AddBatchAccountEventResponse extends BaseEventResponse {
        public String caller;

        public byte[] accounts;
    }

    public static class AddFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class CrossPlatformApprovalEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public Boolean approved;
    }

    public static class DelFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetSwitcherStateOfPlatformEventResponse extends BaseEventResponse {
        public String operator;

        public Boolean isOpen;
    }

    public static class SyncPlatformDIDEventResponse extends BaseEventResponse {
        public String operator;

        public List<String> dids;
    }

    public static class UpdateAccountStateEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger platformState;

        public BigInteger operatorState;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
