package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DDC721 extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161394962000100600039600081816109060152818161094601528181610b570152610b9701526139496000f3fe60806040526004361061020f5760003560e01c80638da5cb5b11610118578063d0def521116100a0578063ed0e31de1161006f578063ed0e31de14610613578063f2fde38b14610633578063f3993d1114610653578063f6dda93614610673578063f96ab8c41461069357600080fd5b8063d0def52114610593578063d302b0dc146105b3578063d7a78db8146105d3578063e985e9c5146105f357600080fd5b8063b2dc5dc3116100e7578063b2dc5dc3146104f0578063b88d4fde14610510578063b9f7fad914610530578063bda8011714610546578063c5837d821461057357600080fd5b80638da5cb5b1461047d57806395d89b411461049b578063a22cb465146104b0578063aa5951be146104d057600080fd5b806344d891df1161019b5780636352211e1161016a5780636352211e146103e557806370a0823114610405578063715018a6146104335780638129fc1c14610448578063862440e21461045d57600080fd5b806344d891df14610365578063458c738e146103855780634f1ef286146103b25780635a446215146103c557600080fd5b806323b872dd116101e257806323b872dd146102c557806328cfbd46146102e5578063293ec97c146103055780633659cfe61461032557806342966c681461034557600080fd5b806301ffc9a71461021457806306fdde0314610249578063081812fc1461026b578063095ea7b3146102a3575b600080fd5b34801561022057600080fd5b5061023461022f366004612c71565b6106b3565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061025e6106ea565b6040516102409190612ce6565b34801561027757600080fd5b5061028b610286366004612cf9565b61077c565b6040516001600160a01b039091168152602001610240565b3480156102af57600080fd5b506102c36102be366004612d2e565b6107a3565b005b3480156102d157600080fd5b506102c36102e0366004612d58565b610800565b3480156102f157600080fd5b506102c3610300366004612ed7565b610810565b34801561031157600080fd5b5061025e610320366004612cf9565b610852565b34801561033157600080fd5b506102c3610340366004612f5b565b6108fc565b34801561035157600080fd5b506102c3610360366004612cf9565b6109c4565b34801561037157600080fd5b506102c3610380366004612f5b565b610a4a565b34801561039157600080fd5b506103a56103a0366004612f76565b610aa0565b6040516102409190613048565b6102c36103c036600461305b565b610b4d565b3480156103d157600080fd5b506102c36103e03660046130a8565b610c06565b3480156103f157600080fd5b5061028b610400366004612cf9565b610c97565b34801561041157600080fd5b50610425610420366004612f5b565b610d0b565b604051908152602001610240565b34801561043f57600080fd5b506102c3610d91565b34801561045457600080fd5b506102c3610dc7565b34801561046957600080fd5b506102c3610478366004613101565b610e4a565b34801561048957600080fd5b506033546001600160a01b031661028b565b3480156104a757600080fd5b5061025e610f86565b3480156104bc57600080fd5b506102c36104cb36600461313f565b610f95565b3480156104dc57600080fd5b506102c36104eb366004613176565b61105c565b3480156104fc57600080fd5b506102c361050b366004613176565b611174565b34801561051c57600080fd5b506102c361052b3660046131b9565b6112a5565b34801561053c57600080fd5b5061010354610425565b34801561055257600080fd5b50610566610561366004613214565b6112bc565b6040516102409190613248565b34801561057f57600080fd5b506102c361058e366004612f5b565b611362565b34801561059f57600080fd5b506102c36105ae36600461305b565b6113b8565b3480156105bf57600080fd5b506102c36105ce366004612cf9565b6113c2565b3480156105df57600080fd5b506102c36105ee366004612cf9565b611406565b3480156105ff57600080fd5b5061023461060e366004613295565b611443565b34801561061f57600080fd5b506102c361062e366004613347565b6114b1565b34801561063f57600080fd5b506102c361064e366004612f5b565b6114bb565b34801561065f57600080fd5b506102c361066e36600461338a565b611553565b34801561067f57600080fd5b506102c361068e3660046133e7565b61155e565b34801561069f57600080fd5b506102c36106ae366004613450565b611579565b60006001600160e01b031982166334d72d0f60e21b14806106e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fb80546106f990613496565b80601f016020809104026020016040519081016040528092919081815260200182805461072590613496565b80156107725780601f1061074757610100808354040283529160200191610772565b820191906000526020600020905b81548152906001019060200180831161075557829003601f168201915b5050505050905090565b600061078782611594565b50600090815260ff60205260409020546001600160a01b031690565b6107ac826115f1565b60006107b8838361160c565b905081836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61080b838383611751565b505050565b61081b8484846117d1565b61082784848484611893565b61084c5760405162461bcd60e51b8152600401610843906134d0565b60405180910390fd5b50505050565b606061085d82611594565b600082815261010160205260409020805461087790613496565b80601f01602080910402602001604051908101604052809291908181526020018280546108a390613496565b80156108f05780601f106108c5576101008083540402835291602001916108f0565b820191906000526020600020905b8154815290600101906020018083116108d357829003601f168201915b50505050509050919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109445760405162461bcd60e51b815260040161084390613521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109766119eb565b6001600160a01b03161461099c5760405162461bcd60e51b81526004016108439061356d565b6109a581611a19565b604080516000808252602082019092526109c191839190611a43565b50565b6109cc611b8e565b6109d581611c61565b600081815260fd60205260409020546001600160a01b03166109f78183611c74565b60006001600160a01b038216336001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f85604051610a3e91815260200190565b60405180910390a45050565b6033546001600160a01b03163314610a745760405162461bcd60e51b8152600401610843906135b9565b610a7d81611ce3565b61010480546001600160a01b0319166001600160a01b0392909216919091179055565b6060600082516001600160401b03811115610abd57610abd612d94565b604051908082528060200260200182016040528015610ae6578160200160208202803683370190505b50905060005b8351811015610b4657610b17848281518110610b0a57610b0a6135ee565b6020026020010151610d0b565b828281518110610b2957610b296135ee565b602090810291909101015280610b3e8161361a565b915050610aec565b5092915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b955760405162461bcd60e51b815260040161084390613521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bc76119eb565b6001600160a01b031614610bed5760405162461bcd60e51b81526004016108439061356d565b610bf682611a19565b610c0282826001611a43565b5050565b6033546001600160a01b03163314610c305760405162461bcd60e51b8152600401610843906135b9565b8151610c439060fb906020850190612bc2565b508051610c579060fc906020840190612bc2565b507fd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b60fb60fc604051610c8b9291906136d2565b60405180910390a15050565b600081815260fd60205260408120546001600160a01b0316806106e45760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6f776e657220717565727920666f72206e6f6e6578697374656044820152656e742064646360d01b6064820152608401610843565b60006001600160a01b038216610d755760405162461bcd60e51b815260206004820152602960248201527f4444433732313a62616c616e636520717565727920666f7220746865207a65726044820152686f206164647265737360b81b6064820152608401610843565b506001600160a01b0316600090815260fe602052604090205490565b6033546001600160a01b03163314610dbb5760405162461bcd60e51b8152600401610843906135b9565b610dc56000611d58565b565b600054610100900460ff1680610de0575060005460ff16155b610dfc5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015610e1e576000805461ffff19166101011790555b610e26611daa565b610e2e611e09565b610e36611e70565b80156109c1576000805461ff001916905550565b610e52611b8e565b610e5b82611ecf565b610e653383611f2e565b8051600003610eb65760405162461bcd60e51b815260206004820152601760248201527f4444433732313a43616e206e6f7420626520656d7074790000000000000000006044820152606401610843565b6000828152610101602052604090208054610ed090613496565b159050610f1f5760405162461bcd60e51b815260206004820152601a60248201527f4444433732313a616c726561647920696e697469616c697a65640000000000006044820152606401610843565b6000828152610101602090815260409091208251610f3f92840190612bc2565b5081336001600160a01b03167f18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d083604051610f7a9190612ce6565b60405180910390a35050565b606060fc80546106f990613496565b610f9e826115f1565b336001600160a01b03831603610ff65760405162461bcd60e51b815260206004820152601860248201527f4444433732313a617070726f766520746f2063616c6c657200000000000000006044820152606401610843565b336000818152610100602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610f7a565b611065826115f1565b600081516001600160401b0381111561108057611080612d94565b6040519080825280602002602001820160405280156110a9578160200160208202803683370190505b50905060005b8251811015611117576110db848483815181106110ce576110ce6135ee565b602002602001015161160c565b8282815181106110ed576110ed6135ee565b6001600160a01b03909216602092830291909101909101528061110f8161361a565b9150506110af565b50826001600160a01b0316816040516111309190613745565b60405180910390207f04330fc119d24ce0982e8f95a39c2135b36a65bb93b04d592b3a68f6de3e12be846040516111679190613048565b60405180910390a3505050565b61117c611b8e565b60005b815181101561125f576111aa82828151811061119d5761119d6135ee565b6020026020010151611c61565b60006111ce8383815181106111c1576111c16135ee565b6020026020010151610c97565b9050806001600160a01b0316846001600160a01b0316146112295760405162461bcd60e51b81526020600482015260156024820152742222219b99189d1034b73b30b634b21037bbb732b960591b6044820152606401610843565b61124c8484848151811061123f5761123f6135ee565b6020026020010151611c74565b50806112578161361a565b91505061117f565b5060006001600160a01b038316336001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c55784604051610a3e9190613048565b6112b0848484611751565b61082784848484611fcd565b6060600082516001600160401b038111156112d9576112d9612d94565b604051908082528060200260200182016040528015611302578160200160208202803683370190505b50905060005b8351811015610b46576113268482815181106111c1576111c16135ee565b828281518110611338576113386135ee565b6001600160a01b03909216602092830291909101909101528061135a8161361a565b915050611308565b6033546001600160a01b0316331461138c5760405162461bcd60e51b8152600401610843906135b9565b61139581611ce3565b61010580546001600160a01b0319166001600160a01b0392909216919091179055565b61080b82826120bb565b6113cd81600061214a565b60405181815233907faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f906020015b60405180910390a250565b61141181600161214a565b60405181815233907f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36906020016113fb565b60006001600160a01b0383161580159061146557506001600160a01b03821615155b6114815760405162461bcd60e51b815260040161084390613784565b506001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b61080b8282612184565b6033546001600160a01b031633146114e55760405162461bcd60e51b8152600401610843906135b9565b6001600160a01b03811661154a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610843565b6109c181611d58565b61080b8383836117d1565b600061156a84846120bb565b90506108276000858385611fcd565b60006115858484612184565b90506108276000858385611893565b600081815260fd60205260409020546001600160a01b03166109c15760405162461bcd60e51b81526020600482015260166024820152754444433732313a6e6f6e6578697374656e742064646360501b6044820152606401610843565b6115f9611b8e565b611602816122a1565b6109c13382612382565b600061161782611ecf565b600082815260fd60205260409020546001600160a01b03169050806001600160a01b0316836001600160a01b0316036116925760405162461bcd60e51b815260206004820181905260248201527f4444433732313a617070726f76616c20746f2063757272656e74206f776e65726044820152606401610843565b336001600160a01b03821614806116ae57506116ae8133611443565b6117205760405162461bcd60e51b815260206004820152603760248201527f4444433732313a617070726f76652063616c6c6572206973206e6f74206f776e60448201527f6572206e6f7220617070726f76656420666f7220616c6c0000000000000000006064820152608401610843565b600091825260ff602052604090912080546001600160a01b0319166001600160a01b03939093169290921790915590565b61175b83836123d8565b611764816123fc565b61176f838383612405565b816001600160a01b0316836001600160a01b031661178a3390565b6001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f846040516117c491815260200190565b60405180910390a4505050565b6117db83836123d8565b60005b815181101561183f576118098282815181106117fc576117fc6135ee565b60200260200101516123fc565b61182d8484848481518110611820576118206135ee565b6020026020010151612405565b806118378161361a565b9150506117de565b50816001600160a01b0316836001600160a01b031661185b3390565b6001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c557846040516117c49190613048565b60006001600160a01b0384163b156119df576040516325c0462360e11b81526001600160a01b03851690634b808c46906118d79033908990889088906004016137b1565b6020604051808303816000875af1925050508015611912575060408051601f3d908101601f1916820190925261190f918101906137ef565b60015b6119c5573d808015611940576040519150601f19603f3d011682016040523d82523d6000602084013e611945565b606091505b5080516000036119bd5760405162461bcd60e51b815260206004820152603860248201527f4444433732313a7472616e7366657220746f206e6f6e206f6e4552433732314260448201527f61746368526563656976656420696d706c656d656e74657200000000000000006064820152608401610843565b805181602001fd5b6001600160e01b0319166325c0462360e11b1490506119e3565b5060015b949350505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109c15760405162461bcd60e51b8152600401610843906135b9565b6000611a4d6119eb565b9050611a5884612525565b600083511180611a655750815b15611a7657611a7484846125ca565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611b8757805460ff191660011781556040516001600160a01b0383166024820152611af590869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526125ca565b50805460ff19168155611b066119eb565b6001600160a01b0316826001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610843565b611b87856126b5565b5050505050565b610105546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af1158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e919061380c565b610dc55760405162461bcd60e51b81526020600482015260146024820152732222219b99189d3737903832b936b4b9b9b4b7b760611b6044820152606401610843565b611c6a81611594565b6109c13382611f2e565b600081815260ff6020526040902080546001600160a01b03191690556001600160a01b038216600090815260fe60205260408120805460019290611cb9908490613829565b9091555050600081815260fd6020526040902080546001600160a01b0319169055610c02816126f5565b6001600160a01b038116611d095760405162461bcd60e51b815260040161084390613784565b6001600160a01b0381163b6109c15760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e9b9bdd08184818dbdb9d1c9858dd605a1b6044820152606401610843565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611dc3575060005460ff16155b611ddf5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611e01576000805461ffff19166101011790555b610e36612771565b600054610100900460ff1680611e22575060005460ff16155b611e3e5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611e60576000805461ffff19166101011790555b611e68612771565b610e366127db565b600054610100900460ff1680611e89575060005460ff16155b611ea55760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611ec7576000805461ffff19166101011790555b611e01612771565b611ed881611594565b6000818152610102602052604090205460ff16156109c15760405162461bcd60e51b81526020600482015260136024820152724444433732313a64697361626c65642064646360681b6044820152606401610843565b600081815260fd60205260409020546001600160a01b03908116908316811480611f715750826001600160a01b0316611f668361077c565b6001600160a01b0316145b80611f815750611f818184611443565b61080b5760405162461bcd60e51b815260206004820152601d60248201527f4444433732313a6e6f74206f776e6572206e6f7220617070726f7665640000006044820152606401610843565b60006001600160a01b0384163b156119df57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612011903390899088908890600401613840565b6020604051808303816000875af192505050801561204c575060408051601f3d908101601f19168201909252612049918101906137ef565b60015b6120a1573d80801561207a576040519150601f19603f3d011682016040523d82523d6000602084013e61207f565b606091505b5080516000036119bd5760405162461bcd60e51b8152600401610843906134d0565b6001600160e01b031916630a85bd0160e11b1490506119e3565b60006120c5611b8e565b6120ce836122a1565b6120d9335b84612382565b610103546120e890600161387d565b90506120f583828461283b565b6001600160a01b0383166000336001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f8460405161213c91815260200190565b60405180910390a492915050565b612152611b8e565b61215a612916565b612163826129e4565b60009182526101026020526040909120805460ff1916911515919091179055565b606061218e611b8e565b612197836122a1565b6121a0336120d3565b81516001600160401b038111156121b9576121b9612d94565b6040519080825280602002602001820160405280156121e2578160200160208202803683370190505b50905060005b825181101561225b576000610103546001612203919061387d565b905080838381518110612218576122186135ee565b602002602001018181525050612248858286858151811061223b5761223b6135ee565b602002602001015161283b565b50806122538161361a565b9150506121e8565b506001600160a01b0383166000336001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c5578460405161213c9190613048565b6001600160a01b0381166122c75760405162461bcd60e51b815260040161084390613784565b610105546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa158015612312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612336919061380c565b6109c15760405162461bcd60e51b815260206004820152601e60248201527f4444433732313a6e6f74206120617661696c61626c65206163636f756e7400006044820152606401610843565b61238c8282612a4c565b610c025760405162461bcd60e51b815260206004820181905260248201527f4444433732313a6f6e6c79206f6e207468652073616d6520706c6174666f726d6044820152606401610843565b6123e0611b8e565b6123e9826122a1565b6123f2816122a1565b610c028282612acc565b611c6a81611ecf565b826001600160a01b031661241882610c97565b6001600160a01b03161461247d5760405162461bcd60e51b815260206004820152602660248201527f4444433732313a7472616e73666572206f66206464632074686174206973206e60448201526537ba1037bbb760d11b6064820152608401610843565b600081815260ff6020526040902080546001600160a01b03191690556001600160a01b038316600090815260fe602052604081208054600192906124c2908490613829565b90915550506001600160a01b038216600090815260fe602052604081208054600192906124f090849061387d565b9091555050600081815260fd6020526040902080546001600160a01b0319166001600160a01b03841617905561080b816126f5565b803b6125895760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610843565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6126295760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610843565b600080846001600160a01b0316846040516126449190613895565b600060405180830381855af49150503d806000811461267f576040519150601f19603f3d011682016040523d82523d6000602084013e612684565b606091505b50915091506126ac82826040518060600160405280602781526020016138ed60279139612b4e565b95945050505050565b6126be81612525565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610104546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b15801561275d57600080fd5b505af1158015611b87573d6000803e3d6000fd5b600054610100900460ff168061278a575060005460ff16155b6127a65760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015610e36576000805461ffff191661010117905580156109c1576000805461ff001916905550565b600054610100900460ff16806127f4575060005460ff16155b6128105760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015612832576000805461ffff19166101011790555b610e3633611d58565b600082815260fd60205260409020546001600160a01b0316156128985760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e985b1c9958591e481b5a5b9d1959605a1b6044820152606401610843565b6001600160a01b038316600090815260fe602052604081208054600192906128c190849061387d565b9091555050600082815260fd6020908152604080832080546001600160a01b0319166001600160a01b0388161790556101018252909120825161290692840190612bc2565b5061010382905561080b826126f5565b610105546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b81526004016129489291906138b1565b602060405180830381865afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612989919061380c565b610dc55760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6e6f742061206f70657261746f7220726f6c65206f722064696044820152651cd8589b195960d21b6064820152608401610843565b6129ed81611594565b6000818152610102602052604090205460ff166109c15760405162461bcd60e51b815260206004820152601760248201527f4444433732313a6e6f6e2d64697361626c6564206464630000000000000000006044820152606401610843565b61010554604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac5919061380c565b9392505050565b612ad68282612a4c565b80612ae65750612ae68282612b87565b610c025760405162461bcd60e51b815260206004820152603360248201527f4444433732313a4f6e6c79206f6e6520706c6174666f726d206f722063726f736044820152721ccb5c1b185d199bdc9b48185c1c1c9bdd985b606a1b6064820152608401610843565b60608315612b5d575081612ac5565b825115612b6d5782518084602001fd5b8160405162461bcd60e51b81526004016108439190612ce6565b6101055460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401612a84565b828054612bce90613496565b90600052602060002090601f016020900481019282612bf05760008555612c36565b82601f10612c0957805160ff1916838001178555612c36565b82800160010185558215612c36579182015b82811115612c36578251825591602001919060010190612c1b565b50612c42929150612c46565b5090565b5b80821115612c425760008155600101612c47565b6001600160e01b0319811681146109c157600080fd5b600060208284031215612c8357600080fd5b8135612ac581612c5b565b60005b83811015612ca9578181015183820152602001612c91565b8381111561084c5750506000910152565b60008151808452612cd2816020860160208601612c8e565b601f01601f19169290920160200192915050565b602081526000612ac56020830184612cba565b600060208284031215612d0b57600080fd5b5035919050565b80356001600160a01b0381168114612d2957600080fd5b919050565b60008060408385031215612d4157600080fd5b612d4a83612d12565b946020939093013593505050565b600080600060608486031215612d6d57600080fd5b612d7684612d12565b9250612d8460208501612d12565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dd257612dd2612d94565b604052919050565b60006001600160401b03821115612df357612df3612d94565b5060051b60200190565b600082601f830112612e0e57600080fd5b81356020612e23612e1e83612dda565b612daa565b82815260059290921b84018101918181019086841115612e4257600080fd5b8286015b84811015612e5d5780358352918301918301612e46565b509695505050505050565b600082601f830112612e7957600080fd5b81356001600160401b03811115612e9257612e92612d94565b612ea5601f8201601f1916602001612daa565b818152846020838601011115612eba57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612eed57600080fd5b612ef685612d12565b9350612f0460208601612d12565b925060408501356001600160401b0380821115612f2057600080fd5b612f2c88838901612dfd565b93506060870135915080821115612f4257600080fd5b50612f4f87828801612e68565b91505092959194509250565b600060208284031215612f6d57600080fd5b612ac582612d12565b60006020808385031215612f8957600080fd5b82356001600160401b03811115612f9f57600080fd5b8301601f81018513612fb057600080fd5b8035612fbe612e1e82612dda565b81815260059190911b82018301908381019087831115612fdd57600080fd5b928401925b8284101561300257612ff384612d12565b82529284019290840190612fe2565b979650505050505050565b600081518084526020808501945080840160005b8381101561303d57815187529582019590820190600101613021565b509495945050505050565b602081526000612ac5602083018461300d565b6000806040838503121561306e57600080fd5b61307783612d12565b915060208301356001600160401b0381111561309257600080fd5b61309e85828601612e68565b9150509250929050565b600080604083850312156130bb57600080fd5b82356001600160401b03808211156130d257600080fd5b6130de86838701612e68565b935060208501359150808211156130f457600080fd5b5061309e85828601612e68565b6000806040838503121561311457600080fd5b8235915060208301356001600160401b0381111561309257600080fd5b80151581146109c157600080fd5b6000806040838503121561315257600080fd5b61315b83612d12565b9150602083013561316b81613131565b809150509250929050565b6000806040838503121561318957600080fd5b61319283612d12565b915060208301356001600160401b038111156131ad57600080fd5b61309e85828601612dfd565b600080600080608085870312156131cf57600080fd5b6131d885612d12565b93506131e660208601612d12565b92506040850135915060608501356001600160401b0381111561320857600080fd5b612f4f87828801612e68565b60006020828403121561322657600080fd5b81356001600160401b0381111561323c57600080fd5b6119e384828501612dfd565b6020808252825182820181905260009190848201906040850190845b818110156132895783516001600160a01b031683529284019291840191600101613264565b50909695505050505050565b600080604083850312156132a857600080fd5b6132b183612d12565b91506132bf60208401612d12565b90509250929050565b600082601f8301126132d957600080fd5b813560206132e9612e1e83612dda565b82815260059290921b8401810191818101908684111561330857600080fd5b8286015b84811015612e5d5780356001600160401b0381111561332b5760008081fd5b6133398986838b0101612e68565b84525091830191830161330c565b6000806040838503121561335a57600080fd5b61336383612d12565b915060208301356001600160401b0381111561337e57600080fd5b61309e858286016132c8565b60008060006060848603121561339f57600080fd5b6133a884612d12565b92506133b660208501612d12565b915060408401356001600160401b038111156133d157600080fd5b6133dd86828701612dfd565b9150509250925092565b6000806000606084860312156133fc57600080fd5b61340584612d12565b925060208401356001600160401b038082111561342157600080fd5b61342d87838801612e68565b9350604086013591508082111561344357600080fd5b506133dd86828701612e68565b60008060006060848603121561346557600080fd5b61346e84612d12565b925060208401356001600160401b038082111561348a57600080fd5b61342d878388016132c8565b600181811c908216806134aa57607f821691505b6020821081036134ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4444433732313a7472616e7366657220746f206e6f6e2045524337323152656360408201527032b4bb32b91034b6b83632b6b2b73a32b960791b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161362c5761362c613604565b5060010190565b8054600090600181811c908083168061364d57607f831692505b6020808410820361366e57634e487b7160e01b600052602260045260246000fd5b83885260208801828015613689576001811461369a576136c5565b60ff198716825282820197506136c5565b60008981526020902060005b878110156136bf578154848201529086019084016136a6565b83019850505b5050505050505092915050565b6040815260006136e56040830185613633565b82810360208401526126ac8185613633565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b815160009082906020808601845b838110156137785781516001600160a01b031685529382019390820190600101613753565b50929695505050505050565b6020808252601390820152724444433732313a7a65726f206164647265737360681b604082015260600190565b6001600160a01b038581168252841660208201526080604082018190526000906137dd9083018561300d565b82810360608401526130028185612cba565b60006020828403121561380157600080fd5b8151612ac581612c5b565b60006020828403121561381e57600080fd5b8151612ac581613131565b60008282101561383b5761383b613604565b500390565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061387390830184612cba565b9695505050505050565b6000821982111561389057613890613604565b500190565b600082516138a7818460208701612c8e565b9190910192915050565b6001600160a01b038316815260408101600383106138df57634e487b7160e01b600052602160045260246000fd5b826020830152939250505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f27de6fc74a6d0916539fa557c809b4ec52b612f6c817eacbced07e861b529f564736f6c634300080e0033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_APPROVEBATCH = "approveBatch";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BATCHTRANSFERFROM = "batchTransferFrom";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_DDCURI = "ddcURI";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETLATESTDDCID = "getLatestDDCId";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_OWNEROFBATCH = "ownerOfBatch";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFEMINTBATCH = "safeMintBatch";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORITYPROXYADDRESS = "setAuthorityProxyAddress";

    public static final String FUNC_SETCHARGEPROXYADDRESS = "setChargeProxyAddress";

    public static final String FUNC_SETNAMEANDSYMBOL = "setNameAndSymbol";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNFREEZE = "unFreeze";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    public static final Event APPROVALBATCH_EVENT = new Event("ApprovalBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ENTERBLACKLIST_EVENT = new Event("EnterBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event EXITBLACKLIST_EVENT = new Event("ExitBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETNAMEANDSYMBOL_EVENT = new Event("SetNameAndSymbol",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event SETURI_EVENT = new Event("SetURI",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected DDC721(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DDC721(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DDC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DDC721(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalBatchEventResponse> getApprovalBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALBATCH_EVENT, transactionReceipt);
        ArrayList<ApprovalBatchEventResponse> responses = new ArrayList<ApprovalBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalBatchEventResponse typedResponse = new ApprovalBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owners = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalBatchEventResponse> approvalBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalBatchEventResponse>() {
            @Override
            public ApprovalBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALBATCH_EVENT, log);
                ApprovalBatchEventResponse typedResponse = new ApprovalBatchEventResponse();
                typedResponse.log = log;
                typedResponse.owners = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalBatchEventResponse> approvalBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALBATCH_EVENT));
        return approvalBatchEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<EnterBlacklistEventResponse> getEnterBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, transactionReceipt);
        ArrayList<EnterBlacklistEventResponse> responses = new ArrayList<EnterBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnterBlacklistEventResponse>() {
            @Override
            public EnterBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, log);
                EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENTERBLACKLIST_EVENT));
        return enterBlacklistEventFlowable(filter);
    }

    public List<ExitBlacklistEventResponse> getExitBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXITBLACKLIST_EVENT, transactionReceipt);
        ArrayList<ExitBlacklistEventResponse> responses = new ArrayList<ExitBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExitBlacklistEventResponse>() {
            @Override
            public ExitBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXITBLACKLIST_EVENT, log);
                ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXITBLACKLIST_EVENT));
        return exitBlacklistEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetNameAndSymbolEventResponse> getSetNameAndSymbolEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETNAMEANDSYMBOL_EVENT, transactionReceipt);
        ArrayList<SetNameAndSymbolEventResponse> responses = new ArrayList<SetNameAndSymbolEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetNameAndSymbolEventResponse typedResponse = new SetNameAndSymbolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetNameAndSymbolEventResponse> setNameAndSymbolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetNameAndSymbolEventResponse>() {
            @Override
            public SetNameAndSymbolEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETNAMEANDSYMBOL_EVENT, log);
                SetNameAndSymbolEventResponse typedResponse = new SetNameAndSymbolEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetNameAndSymbolEventResponse> setNameAndSymbolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETNAMEANDSYMBOL_EVENT));
        return setNameAndSymbolEventFlowable(filter);
    }

    public List<SetURIEventResponse> getSetURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETURI_EVENT, transactionReceipt);
        ArrayList<SetURIEventResponse> responses = new ArrayList<SetURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetURIEventResponse typedResponse = new SetURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetURIEventResponse>() {
            @Override
            public SetURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETURI_EVENT, log);
                SetURIEventResponse typedResponse = new SetURIEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETURI_EVENT));
        return setURIEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(160, to),
                        new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveBatch(String to, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVEBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> owners) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(owners, Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> batchTransferFrom(String from, String to, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHTRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String owner, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH,
                Arrays.<Type>asList(new Address(160, owner),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> ddcURI(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DDCURI,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> freeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getLatestDDCId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLATESTDDCID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, String _ddcURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Utf8String(_ddcURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<String> ddcURIs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> ownerOfBatch(List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROFBATCH,
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ddcIds, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, String _ddcURI, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Utf8String(_ddcURI),
                        new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMintBatch(String to, List<String> ddcURIs, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINTBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger ddcId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(ddcId),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorityProxyAddress(String authorityProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTHORITYPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, authorityProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChargeProxyAddress(String chargeProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCHARGEPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, chargeProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNameAndSymbol(String name_, String symbol_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNAMEANDSYMBOL,
                Arrays.<Type>asList(new Utf8String(name_),
                        new Utf8String(symbol_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(BigInteger ddcId, String ddcURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI,
                Arrays.<Type>asList(new Uint256(ddcId),
                        new Utf8String(ddcURI_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unFreeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNFREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DDC721 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC721(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DDC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC721(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DDC721 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DDC721(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DDC721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DDC721(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DDC721> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC721.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DDC721> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC721.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC721> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC721.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC721> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC721.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger ddcId;
    }

    public static class ApprovalBatchEventResponse extends BaseEventResponse {
        public byte[] owners;

        public String approved;

        public List<BigInteger> ddcIds;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class EnterBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class ExitBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetNameAndSymbolEventResponse extends BaseEventResponse {
        public String name;

        public String symbol;
    }

    public static class SetURIEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger ddcId;

        public String ddcURI;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger ddcId;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ddcIds;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
