package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DDC1155 extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161316262000100600039600081816106c701528181610707015281816108ce015261090e01526131626000f3fe60806040526004361061014a5760003560e01c80638da5cb5b116100b6578063c5837d821161006f578063c5837d82146103a8578063d302b0dc146103c8578063d7a78db8146103e8578063e985e9c514610408578063f242432a14610428578063f2fde38b1461044857600080fd5b80638da5cb5b146102eb5780639dc29fac14610313578063a22cb46514610333578063b2dc5dc314610353578063b55bc61714610373578063b9f7fad91461039357600080fd5b80634e1273f4116101085780634e1273f4146102415780634f1ef2861461026e5780636357035514610281578063685e8247146102a1578063715018a6146102c15780638129fc1c146102d657600080fd5b8062fdd58e1461014f57806301ffc9a714610182578063293ec97c146101b25780632eb2c2d6146101df5780633659cfe61461020157806344d891df14610221575b600080fd5b34801561015b57600080fd5b5061016f61016a3660046125ac565b610468565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d3660046125ec565b6104c1565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004612609565b6104f8565b604051610179919061267a565b3480156101eb57600080fd5b506101ff6101fa3660046127d6565b6105a1565b005b34801561020d57600080fd5b506101ff61021c36600461287f565b6106bd565b34801561022d57600080fd5b506101ff61023c36600461287f565b610785565b34801561024d57600080fd5b5061026161025c36600461289a565b6107db565b604051610179919061299f565b6101ff61027c3660046129b2565b6108c4565b34801561028d57600080fd5b506101ff61029c3660046129f5565b61097d565b3480156102ad57600080fd5b506101ff6102bc366004612b0a565b610b0e565b3480156102cd57600080fd5b506101ff610c49565b3480156102e257600080fd5b506101ff610c7f565b3480156102f757600080fd5b506097546040516001600160a01b039091168152602001610179565b34801561031f57600080fd5b506101ff61032e3660046125ac565b610d02565b34801561033f57600080fd5b506101ff61034e366004612b6e565b610d6b565b34801561035f57600080fd5b506101ff61036e366004612ba5565b610e54565b34801561037f57600080fd5b506101ff61038e366004612be8565b610f43565b34801561039f57600080fd5b5061016f610fd5565b3480156103b457600080fd5b506101ff6103c336600461287f565b610fe7565b3480156103d457600080fd5b506101ff6103e3366004612609565b61103d565b3480156103f457600080fd5b506101ff610403366004612609565b6110b2565b34801561041457600080fd5b506101a2610423366004612c59565b611125565b34801561043457600080fd5b506101ff610443366004612c8c565b611192565b34801561045457600080fd5b506101ff61046336600461287f565b611240565b60006001600160a01b0383166104995760405162461bcd60e51b815260040161049090612cf0565b60405180910390fd5b50600090815260fb602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982166305dcd1dd60e41b14806104f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610503826112d8565b600082815260fd60205260409020805461051c90612d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461054890612d1e565b80156105955780601f1061056a57610100808354040283529160200191610595565b820191906000526020600020905b81548152906001019060200180831161057857829003601f168201915b50505050509050919050565b6105a9611336565b6105b28561140a565b6105bb8461140a565b6105c585856114eb565b6105cf853361156e565b81518351146105f05760405162461bcd60e51b815260040161049090612d58565b60005b835181101561064a5761063a868686848151811061061357610613612d8f565b602002602001015186858151811061062d5761062d612d8f565b60200260200101516115e0565b61064381612dbb565b90506105f3565b50836001600160a01b0316856001600160a01b03166106663390565b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516106a0929190612dd4565b60405180910390a46106b6338686868686611646565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107055760405162461bcd60e51b815260040161049090612df9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107376117d9565b6001600160a01b03161461075d5760405162461bcd60e51b815260040161049090612e45565b61076681611807565b6040805160008082526020820190925261078291839190611831565b50565b6097546001600160a01b031633146107af5760405162461bcd60e51b815260040161049090612e91565b6107b881611975565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b606081518351146107fe5760405162461bcd60e51b815260040161049090612d58565b600083516001600160401b038111156108195761081961268d565b604051908082528060200260200182016040528015610842578160200160208202803683370190505b50905060005b83518110156108bc5761088d85828151811061086657610866612d8f565b602002602001015185838151811061088057610880612d8f565b6020026020010151610468565b82828151811061089f5761089f612d8f565b6020908102919091010152806108b481612dbb565b915050610848565b509392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361090c5760405162461bcd60e51b815260040161049090612df9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661093e6117d9565b6001600160a01b0316146109645760405162461bcd60e51b815260040161049090612e45565b61096d82611807565b61097982826001611831565b5050565b610985611336565b61098e8461140a565b610999335b856119eb565b81518351146109ba5760405162461bcd60e51b815260040161049090612d58565b6101005483516000906001600160401b038111156109da576109da61268d565b604051908082528060200260200182016040528015610a03578160200160208202803683370190505b50905060005b8551811015610aa757610a1d600184612ec6565b925082828281518110610a3257610a32612d8f565b602002602001018181525050610a9587838381518110610a5457610a54612d8f565b6020026020010151888481518110610a6e57610a6e612d8f565b6020026020010151888581518110610a8857610a88612d8f565b6020026020010151611a4b565b80610a9f81612dbb565b915050610a09565b506001600160a01b0386166000336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8489604051610aef929190612dd4565b60405180910390a4610b0633600088848988611646565b505050505050565b610b16611336565b610b1f82611ada565b610b29833361156e565b8051600003610b7a5760405162461bcd60e51b815260206004820152601860248201527f444443313135353a43616e206e6f7420626520656d70747900000000000000006044820152606401610490565b600082815260fd602052604090208054610b9390612d1e565b159050610be25760405162461bcd60e51b815260206004820152601b60248201527f444443313135353a616c726561647920696e697469616c697a656400000000006044820152606401610490565b600082815260fd602090815260409091208251610c01928401906124f7565b5081336001600160a01b03167f18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d083604051610c3c919061267a565b60405180910390a3505050565b6097546001600160a01b03163314610c735760405162461bcd60e51b815260040161049090612e91565b610c7d6000611b3a565b565b600054610100900460ff1680610c98575060005460ff16155b610cb45760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015610cd6576000805461ffff19166101011790555b610cde611b8c565b610ce6611beb565b610cee611c52565b8015610782576000805461ff001916905550565b610d0a611336565b610d14823361156e565b610d1e8282611cb1565b60408051828152600060208201819052916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050565b610d73611336565b610d7c8261140a565b610d8633836119eb565b6001600160a01b0382163303610de85760405162461bcd60e51b815260206004820152602160248201527f444443313135353a73657474696e6720617070726f76616c20666f722073656c6044820152603360f91b6064820152608401610490565b33600081815260fc602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e5c611336565b610e66823361156e565b600081516001600160401b03811115610e8157610e8161268d565b604051908082528060200260200182016040528015610eaa578160200160208202803683370190505b50905060005b8251811015610eee57610edc84848381518110610ecf57610ecf612d8f565b6020026020010151611cb1565b80610ee681612dbb565b915050610eb0565b5060006001600160a01b038416336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051610f36929190612dd4565b60405180910390a4505050565b610f4b611336565b610f548461140a565b610f5d33610993565b6000610100546001610f6f9190612ec6565b9050610f7d85828686611a4b565b60408051828152602081018690526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106b633600087848887611d2a565b6000610fdf611e15565b506101005490565b6097546001600160a01b031633146110115760405162461bcd60e51b815260040161049090612e91565b61101a81611975565b61010280546001600160a01b0319166001600160a01b0392909216919091179055565b611045611336565b61104d611e15565b61105681611ee4565b600081815260ff60205260409020805460ff19169055336001600160a01b03167faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f826040516110a791815260200190565b60405180910390a250565b6110ba611336565b6110c2611e15565b6110cb81611ada565b600081815260ff60205260409020805460ff191660011790556110eb3390565b6001600160a01b03167f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36826040516110a791815260200190565b60006001600160a01b0383161580159061114757506001600160a01b03821615155b6111635760405162461bcd60e51b815260040161049090612cf0565b506001600160a01b03918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b61119a611336565b6111a38561140a565b6111ac8461140a565b6111b685856114eb565b6111c0853361156e565b6111cc858585856115e0565b836001600160a01b0316856001600160a01b03166111e73390565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62868660405161122a929190918252602082015260400190565b60405180910390a46106b6338686868686611d2a565b6097546001600160a01b0316331461126a5760405162461bcd60e51b815260040161049090612e91565b6001600160a01b0381166112cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610490565b61078281611b3a565b600081815260fe602052604090205460ff166107825760405162461bcd60e51b815260206004820152601760248201527f444443313135353a6e6f6e6578697374656e74206464630000000000000000006044820152606401610490565b610102546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af11580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612f2c565b610c7d5760405162461bcd60e51b815260206004820152601560248201527422222198989a9a9d3737903832b936b4b9b9b4b7b760591b6044820152606401610490565b6001600160a01b0381166114305760405162461bcd60e51b815260040161049090612cf0565b610102546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190612f2c565b6107825760405162461bcd60e51b815260206004820152601f60248201527f444443313135353a6e6f74206120617661696c61626c65206163636f756e74006044820152606401610490565b6114f58282611f4c565b8061150557506115058282611fcc565b6109795760405162461bcd60e51b815260206004820152603460248201527f444443313135353a4f6e6c79206f6e6520706c6174666f726d206f722063726f6044820152731cdccb5c1b185d199bdc9b48185c1c1c9bdd985b60621b6064820152608401610490565b6115788282611125565b806115945750816001600160a01b0316816001600160a01b0316145b6109795760405162461bcd60e51b815260206004820152601e60248201527f444443313135353a6e6f74206f776e6572206e6f7220617070726f76656400006044820152606401610490565b6115e982611ada565b6115f4848383612007565b600082815260fb602090815260408083206001600160a01b0388811685529252808320805485810390915591861683528220805491928492611637908490612ec6565b909155506106b69050836120ae565b6001600160a01b0384163b15610b065760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061168a9089908990889088908890600401612f49565b6020604051808303816000875af19250505080156116c5575060408051601f3d908101601f191682019092526116c291810190612fa7565b60015b611770576116d1612fc4565b806308c379a00361170a57506116e5612fe0565b806116f0575061170c565b8060405162461bcd60e51b8152600401610490919061267a565b505b60405162461bcd60e51b815260206004820152603360248201527f444443313135353a7472616e7366657220746f206e6f6e20455243313135355260448201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b6064820152608401610490565b6001600160e01b0319811663bc197c8160e01b146117d05760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610490565b50505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b031633146107825760405162461bcd60e51b815260040161049090612e91565b600061183b6117d9565b90506118468461212a565b6000835111806118535750815b156118645761186284846121cf565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166106b657805460ff191660011781556040516001600160a01b03831660248201526118e390869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526121cf565b50805460ff191681556118f46117d9565b6001600160a01b0316826001600160a01b03161461196c5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610490565b6106b6856122ba565b6001600160a01b03811661199b5760405162461bcd60e51b815260040161049090612cf0565b6001600160a01b0381163b6107825760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9b9bdd08184818dbdb9d1c9858dd60521b6044820152606401610490565b6119f58282611f4c565b6109795760405162461bcd60e51b815260206004820152602160248201527f444443313135353a6f6e6c79206f6e207468652073616d6520706c6174666f726044820152606d60f81b6064820152608401610490565b611a5583836122fa565b600083815260fb602090815260408083206001600160a01b038816845290915281208054849290611a87908490612ec6565b9091555050600083815260fd602090815260409091208251611aab928401906124f7565b50600083815260fe60205260409020805460ff19166001179055610100839055611ad4836120ae565b50505050565b611ae3816112d8565b600081815260ff602081905260409091205416156107825760405162461bcd60e51b8152602060048201526014602482015273444443313135353a64697361626c65642064646360601b6044820152606401610490565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611ba5575060005460ff16155b611bc15760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611be3576000805461ffff19166101011790555b610cee61239b565b600054610100900460ff1680611c04575060005460ff16155b611c205760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611c42576000805461ffff19166101011790555b611c4a61239b565b610cee612405565b600054610100900460ff1680611c6b575060005460ff16155b611c875760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611ca9576000805461ffff19166101011790555b611be361239b565b6001600160a01b038216611cd75760405162461bcd60e51b815260040161049090612cf0565b611ce0816112d8565b611cea8282612465565b600081815260fb602090815260408083206001600160a01b0386168452825280832083905583835260ff9091529020805460ff19169055610979816120ae565b6001600160a01b0384163b15610b065760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6e9089908990889088908890600401613069565b6020604051808303816000875af1925050508015611da9575060408051601f3d908101601f19168201909252611da691810190612fa7565b60015b611db5576116d1612fc4565b6001600160e01b0319811663f23a6e6160e01b146117d05760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610490565b610102546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b8152600401611e479291906130ae565b602060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190612f2c565b610c7d5760405162461bcd60e51b815260206004820152602760248201527f444443313135353a6e6f742061206f70657261746f7220726f6c65206f7220646044820152661a5cd8589b195960ca1b6064820152608401610490565b611eed816112d8565b600081815260ff6020819052604090912054166107825760405162461bcd60e51b815260206004820152601860248201527f444443313135353a6e6f6e2d64697361626c65642064646300000000000000006044820152606401610490565b61010254604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015611fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc59190612f2c565b9392505050565b6101025460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401611f84565b600081116120505760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610490565b8061205b8484610468565b10156120a95760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610490565b505050565b610101546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b15801561211657600080fd5b505af11580156106b6573d6000803e3d6000fd5b803b61218e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61222e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610490565b600080846001600160a01b03168460405161224991906130e9565b600060405180830381855af49150503d8060008114612284576040519150601f19603f3d011682016040523d82523d6000602084013e612289565b606091505b50915091506122b18282604051806060016040528060278152602001613106602791396124be565b95945050505050565b6122c38161212a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600081116123435760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610490565b600082815260fe602052604090205460ff16156109795760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e985b1c9958591e481b5a5b9d195960521b6044820152606401610490565b600054610100900460ff16806123b4575060005460ff16155b6123d05760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015610cee576000805461ffff19166101011790558015610782576000805461ff001916905550565b600054610100900460ff168061241e575060005460ff16155b61243a5760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff1615801561245c576000805461ffff19166101011790555b610cee33611b3a565b60006124718383610468565b116109795760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610490565b606083156124cd575081611fc5565b8251156124dd5782518084602001fd5b8160405162461bcd60e51b8152600401610490919061267a565b82805461250390612d1e565b90600052602060002090601f016020900481019282612525576000855561256b565b82601f1061253e57805160ff191683800117855561256b565b8280016001018555821561256b579182015b8281111561256b578251825591602001919060010190612550565b5061257792915061257b565b5090565b5b80821115612577576000815560010161257c565b80356001600160a01b03811681146125a757600080fd5b919050565b600080604083850312156125bf57600080fd5b6125c883612590565b946020939093013593505050565b6001600160e01b03198116811461078257600080fd5b6000602082840312156125fe57600080fd5b8135611fc5816125d6565b60006020828403121561261b57600080fd5b5035919050565b60005b8381101561263d578181015183820152602001612625565b83811115611ad45750506000910152565b60008151808452612666816020860160208601612622565b601f01601f19169290920160200192915050565b602081526000611fc5602083018461264e565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156126c8576126c861268d565b6040525050565b60006001600160401b038211156126e8576126e861268d565b5060051b60200190565b600082601f83011261270357600080fd5b81356020612710826126cf565b60405161271d82826126a3565b83815260059390931b850182019282810191508684111561273d57600080fd5b8286015b848110156127585780358352918301918301612741565b509695505050505050565b600082601f83011261277457600080fd5b81356001600160401b0381111561278d5761278d61268d565b6040516127a4601f8301601f1916602001826126a3565b8181528460208386010111156127b957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156127ee57600080fd5b6127f786612590565b945061280560208701612590565b935060408601356001600160401b038082111561282157600080fd5b61282d89838a016126f2565b9450606088013591508082111561284357600080fd5b61284f89838a016126f2565b9350608088013591508082111561286557600080fd5b5061287288828901612763565b9150509295509295909350565b60006020828403121561289157600080fd5b611fc582612590565b600080604083850312156128ad57600080fd5b82356001600160401b03808211156128c457600080fd5b818501915085601f8301126128d857600080fd5b813560206128e5826126cf565b6040516128f282826126a3565b83815260059390931b850182019282810191508984111561291257600080fd5b948201945b838610156129375761292886612590565b82529482019490820190612917565b9650508601359250508082111561294d57600080fd5b5061295a858286016126f2565b9150509250929050565b600081518084526020808501945080840160005b8381101561299457815187529582019590820190600101612978565b509495945050505050565b602081526000611fc56020830184612964565b600080604083850312156129c557600080fd5b6129ce83612590565b915060208301356001600160401b038111156129e957600080fd5b61295a85828601612763565b60008060008060808587031215612a0b57600080fd5b612a1485612590565b93506020808601356001600160401b0380821115612a3157600080fd5b612a3d89838a016126f2565b95506040880135915080821115612a5357600080fd5b818801915088601f830112612a6757600080fd5b8135612a72816126cf565b604051612a7f82826126a3565b82815260059290921b840185019185810191508b831115612a9f57600080fd5b8585015b83811015612ad757803585811115612abb5760008081fd5b612ac98e89838a0101612763565b845250918601918601612aa3565b50965050506060880135925080831115612af057600080fd5b5050612afe87828801612763565b91505092959194509250565b600080600060608486031215612b1f57600080fd5b612b2884612590565b92506020840135915060408401356001600160401b03811115612b4a57600080fd5b612b5686828701612763565b9150509250925092565b801515811461078257600080fd5b60008060408385031215612b8157600080fd5b612b8a83612590565b91506020830135612b9a81612b60565b809150509250929050565b60008060408385031215612bb857600080fd5b612bc183612590565b915060208301356001600160401b03811115612bdc57600080fd5b61295a858286016126f2565b60008060008060808587031215612bfe57600080fd5b612c0785612590565b93506020850135925060408501356001600160401b0380821115612c2a57600080fd5b612c3688838901612763565b93506060870135915080821115612c4c57600080fd5b50612afe87828801612763565b60008060408385031215612c6c57600080fd5b612c7583612590565b9150612c8360208401612590565b90509250929050565b600080600080600060a08688031215612ca457600080fd5b612cad86612590565b9450612cbb60208701612590565b9350604086013592506060860135915060808601356001600160401b03811115612ce457600080fd5b61287288828901612763565b602080825260149082015273444443313135353a7a65726f206164647265737360601b604082015260600190565b600181811c90821680612d3257607f821691505b602082108103612d5257634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f444443313135353a6c656e677468206d69736d61746368000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612dcd57612dcd612da5565b5060010190565b604081526000612de76040830185612964565b82810360208401526122b18185612964565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612ed957612ed9612da5565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612f3e57600080fd5b8151611fc581612b60565b6001600160a01b0386811682528516602082015260a060408201819052600090612f7590830186612964565b8281036060840152612f878186612964565b90508281036080840152612f9b818561264e565b98975050505050505050565b600060208284031215612fb957600080fd5b8151611fc5816125d6565b600060033d1115612fdd5760046000803e5060005160e01c5b90565b600060443d1015612fee5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561301d57505050505090565b82850191508151818111156130355750505050505090565b843d870101602082850101111561304f5750505050505090565b61305e602082860101876126a3565b509095945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906130a39083018461264e565b979650505050505050565b6001600160a01b038316815260408101600383106130dc57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600082516130fb818460208701612622565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d42700fe7ca352a45ddd2b4c104e0eb6a872d03c3bb3c9c5155be4f976b26c7564736f6c634300080d0033";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_DDCURI = "ddcURI";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_GETLATESTDDCID = "getLatestDDCId";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFEMINTBATCH = "safeMintBatch";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORITYPROXYADDRESS = "setAuthorityProxyAddress";

    public static final String FUNC_SETCHARGEPROXYADDRESS = "setChargeProxyAddress";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNFREEZE = "unFreeze";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ENTERBLACKLIST_EVENT = new Event("EnterBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event EXITBLACKLIST_EVENT = new Event("ExitBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETURI_EVENT = new Event("SetURI",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<EnterBlacklistEventResponse> getEnterBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, transactionReceipt);
        ArrayList<EnterBlacklistEventResponse> responses = new ArrayList<EnterBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnterBlacklistEventResponse>() {
            @Override
            public EnterBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, log);
                EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENTERBLACKLIST_EVENT));
        return enterBlacklistEventFlowable(filter);
    }

    public List<ExitBlacklistEventResponse> getExitBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXITBLACKLIST_EVENT, transactionReceipt);
        ArrayList<ExitBlacklistEventResponse> responses = new ArrayList<ExitBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExitBlacklistEventResponse>() {
            @Override
            public ExitBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXITBLACKLIST_EVENT, log);
                ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXITBLACKLIST_EVENT));
        return exitBlacklistEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetURIEventResponse> getSetURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETURI_EVENT, transactionReceipt);
        ArrayList<SetURIEventResponse> responses = new ArrayList<SetURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetURIEventResponse typedResponse = new SetURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetURIEventResponse>() {
            @Override
            public SetURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETURI_EVENT, log);
                SetURIEventResponse typedResponse = new SetURIEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETURI_EVENT));
        return setURIEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> owners, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(owners, Address.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String owner, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH,
                Arrays.<Type>asList(new Address(160, owner),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> ddcURI(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DDCURI,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> freeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getLatestDDCId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLATESTDDCID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ddcIds, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger amount, String _ddcURI, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Uint256(amount),
                        new Utf8String(_ddcURI),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMintBatch(String to, List<BigInteger> amounts, List<String> ddcURIs, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINTBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger ddcId, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(ddcId),
                        new Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorityProxyAddress(String authorityProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTHORITYPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, authorityProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChargeProxyAddress(String chargeProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCHARGEPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, chargeProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(String owner, BigInteger ddcId, String ddcURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId),
                        new Utf8String(ddcURI_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unFreeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNFREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class EnterBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class ExitBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetURIEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger ddcId;

        public String ddcURI;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ddcIds;

        public List<BigInteger> amounts;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger ddcId;

        public BigInteger amount;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
